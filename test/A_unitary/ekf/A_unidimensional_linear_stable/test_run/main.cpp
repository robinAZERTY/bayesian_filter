/*
to run all the test use the following command
pio test -e native
*/


/*
To test the basic functionalities of the EKF, here is an example of a simple one-dimensional problem.
Temperature estimation in a controlled environment (such as an oven with a heating element).
The scenario is as follows:
You have an oven, and you want to precisely control its temperature using a heating element.
Let's assume you only have a temperature sensor that is highly imprecise, with significant noise and a low sampling rate.
You also have a physical model of the oven, allowing you to predict the temperature based on the heating power.

The constants characterizing the oven are as follows:
- Thermal inertia: the oven heats up and cools down slowly.
- Thermal losses: the temperature inside the oven tends to equalize naturally with the external temperature.
- External temperature: the external temperature is a known value.

x: oven temperature
u: heating power
c: oven parameters (time step, thermal inertia, thermal losses, external temperature)

The oven temperature evolves according to the following formula:
f(x, u, c) = x + u * c0 / c1 - c0 * (x - c3) / c2

The measurement function is simply the temperature measured by the sensor:
h(x, c) = x

Note: An Extended Kalman Filter (EKF) may not be the ideal solution for this problem since it is linear,
but it should be a good way to check that the EKF is functioning correctly for simple problems.
*/


#include <unity.h>
#include <ekf.hpp>

// #ifdef NATIVE
// #define NAN std::nan("")
// #endif

#define TIME_STEP 10
#define THERMAL_INERTIA 100
#define THERMAL_LOSSES 2
#define EXTERNAL_TEMPERATURE 20

#define MEASURE_NOISE 5
#define PROCESS_NOISE 0.5

// Note : In ekf, c[0] is always the time step, c[1:] are the remaining parameters

template <typename T>
internal::tmp<Vector<T>> && f(const Vector<T> &x, const Vector<T> &u, const Vector<T> &c)
{
    auto *ret = internal::tmp<Vector<T>>::get(x.size()); // ask for a temporary variable of the same size as x
    (*ret)[0] = x[0] + c[0] *(u[0]/c[1] - (x[0]-c[3])/c[2]); // compute the new temperature
    return internal::move(*ret); // return the temporary variable
}

// simple measurement function
template <typename T>
internal::tmp<Vector<T>> && h(const Vector<T> &x, const Vector<T> &c)
{
    auto *ret = internal::tmp<Vector<T>>::get(1); // ask for a temporary variable of size 2
    (*ret)[0] = x[0];
    return internal::move(*ret);
}

Ekf<1, 1, 4, 1, double> ekf(f); // 1 state, 1 command, 4 parameters

Vector<double> Z(1); // measurement
symMatrix<double> R(1, 1); // measurement noise

// <DATA_START>
float Time[] = { 0.000000, 1.000000, 2.000000, 3.000000, 4.000000, 5.000000, 6.000000, 7.000000, 8.000000, 9.000000, 10.000000, 11.000000, 12.000000, 13.000000, 14.000000, 15.000000, 16.000000, 17.000000, 18.000000, 19.000000, 20.000000, 21.000000, 22.000000, 23.000000, 24.000000, 25.000000, 26.000000, 27.000000, 28.000000, 29.000000, 30.000000, 31.000000, 32.000000, 33.000000, 34.000000, 35.000000, 36.000000, 37.000000, 38.000000, 39.000000, 40.000000, 41.000000, 42.000000, 43.000000, 44.000000, 45.000000, 46.000000, 47.000000, 48.000000, 49.000000, 50.000000, 51.000000, 52.000000, 53.000000, 54.000000, 55.000000, 56.000000, 57.000000, 58.000000, 59.000000, 60.000000, 61.000000, 62.000000, 63.000000, 64.000000, 65.000000, 66.000000, 67.000000, 68.000000, 69.000000, 70.000000, 71.000000, 72.000000, 73.000000, 74.000000, 75.000000, 76.000000, 77.000000, 78.000000, 79.000000, 80.000000, 81.000000, 82.000000, 83.000000, 84.000000, 85.000000, 86.000000, 87.000000, 88.000000, 89.000000, 90.000000, 91.000000, 92.000000, 93.000000, 94.000000, 95.000000, 96.000000, 97.000000, 98.000000, 99.000000, 100.000000, 101.000000, 102.000000, 103.000000, 104.000000, 105.000000, 106.000000, 107.000000, 108.000000, 109.000000, 110.000000, 111.000000, 112.000000, 113.000000, 114.000000, 115.000000, 116.000000, 117.000000, 118.000000, 119.000000, 120.000000, 121.000000, 122.000000, 123.000000, 124.000000, 125.000000, 126.000000, 127.000000, 128.000000, 129.000000, 130.000000, 131.000000, 132.000000, 133.000000, 134.000000, 135.000000, 136.000000, 137.000000, 138.000000, 139.000000, 140.000000, 141.000000, 142.000000, 143.000000, 144.000000, 145.000000, 146.000000, 147.000000, 148.000000, 149.000000, 150.000000, 151.000000, 152.000000, 153.000000, 154.000000, 155.000000, 156.000000, 157.000000, 158.000000, 159.000000, 160.000000, 161.000000, 162.000000, 163.000000, 164.000000, 165.000000, 166.000000, 167.000000, 168.000000, 169.000000, 170.000000, 171.000000, 172.000000, 173.000000, 174.000000, 175.000000, 176.000000, 177.000000, 178.000000, 179.000000, 180.000000, 181.000000, 182.000000, 183.000000, 184.000000, 185.000000, 186.000000, 187.000000, 188.000000, 189.000000, 190.000000, 191.000000, 192.000000, 193.000000, 194.000000, 195.000000, 196.000000, 197.000000, 198.000000, 199.000000, 200.000000, 201.000000, 202.000000, 203.000000, 204.000000, 205.000000, 206.000000, 207.000000, 208.000000, 209.000000, 210.000000, 211.000000, 212.000000, 213.000000, 214.000000, 215.000000, 216.000000, 217.000000, 218.000000, 219.000000, 220.000000, 221.000000, 222.000000, 223.000000, 224.000000, 225.000000, 226.000000, 227.000000, 228.000000, 229.000000, 230.000000, 231.000000, 232.000000, 233.000000, 234.000000, 235.000000, 236.000000, 237.000000, 238.000000, 239.000000, 240.000000, 241.000000, 242.000000, 243.000000, 244.000000, 245.000000, 246.000000, 247.000000, 248.000000, 249.000000, 250.000000, 251.000000, 252.000000, 253.000000, 254.000000, 255.000000, 256.000000, 257.000000, 258.000000, 259.000000, 260.000000, 261.000000, 262.000000, 263.000000, 264.000000, 265.000000, 266.000000, 267.000000, 268.000000, 269.000000, 270.000000, 271.000000, 272.000000, 273.000000, 274.000000, 275.000000, 276.000000, 277.000000, 278.000000, 279.000000, 280.000000, 281.000000, 282.000000, 283.000000, 284.000000, 285.000000, 286.000000, 287.000000, 288.000000, 289.000000, 290.000000, 291.000000, 292.000000, 293.000000, 294.000000, 295.000000, 296.000000, 297.000000, 298.000000, 299.000000, 300.000000, 301.000000, 302.000000, 303.000000, 304.000000, 305.000000, 306.000000, 307.000000, 308.000000, 309.000000, 310.000000, 311.000000, 312.000000, 313.000000, 314.000000, 315.000000, 316.000000, 317.000000, 318.000000, 319.000000, 320.000000, 321.000000, 322.000000, 323.000000, 324.000000, 325.000000, 326.000000, 327.000000, 328.000000, 329.000000, 330.000000, 331.000000, 332.000000, 333.000000, 334.000000, 335.000000, 336.000000, 337.000000, 338.000000, 339.000000, 340.000000, 341.000000, 342.000000, 343.000000, 344.000000, 345.000000, 346.000000, 347.000000, 348.000000, 349.000000, 350.000000, 351.000000, 352.000000, 353.000000, 354.000000, 355.000000, 356.000000, 357.000000, 358.000000, 359.000000, 360.000000, 361.000000, 362.000000, 363.000000, 364.000000, 365.000000, 366.000000, 367.000000, 368.000000, 369.000000, 370.000000, 371.000000, 372.000000, 373.000000, 374.000000, 375.000000, 376.000000, 377.000000, 378.000000, 379.000000, 380.000000, 381.000000, 382.000000, 383.000000, 384.000000, 385.000000, 386.000000, 387.000000, 388.000000, 389.000000, 390.000000, 391.000000, 392.000000, 393.000000, 394.000000, 395.000000, 396.000000, 397.000000, 398.000000, 399.000000, 400.000000, 401.000000, 402.000000, 403.000000, 404.000000, 405.000000, 406.000000, 407.000000, 408.000000, 409.000000, 410.000000, 411.000000, 412.000000, 413.000000, 414.000000, 415.000000, 416.000000, 417.000000, 418.000000, 419.000000, 420.000000, 421.000000, 422.000000, 423.000000, 424.000000, 425.000000, 426.000000, 427.000000, 428.000000, 429.000000, 430.000000, 431.000000, 432.000000, 433.000000, 434.000000, 435.000000, 436.000000, 437.000000, 438.000000, 439.000000, 440.000000, 441.000000, 442.000000, 443.000000, 444.000000, 445.000000, 446.000000, 447.000000, 448.000000, 449.000000, 450.000000, 451.000000, 452.000000, 453.000000, 454.000000, 455.000000, 456.000000, 457.000000, 458.000000, 459.000000, 460.000000, 461.000000, 462.000000, 463.000000, 464.000000, 465.000000, 466.000000, 467.000000, 468.000000, 469.000000, 470.000000, 471.000000, 472.000000, 473.000000, 474.000000, 475.000000, 476.000000, 477.000000, 478.000000, 479.000000, 480.000000, 481.000000, 482.000000, 483.000000, 484.000000, 485.000000, 486.000000, 487.000000, 488.000000, 489.000000, 490.000000, 491.000000, 492.000000, 493.000000, 494.000000, 495.000000, 496.000000, 497.000000, 498.000000, 499.000000 };
float XX[] = { 20.000000, 20.102000, 20.204980, 20.308930, 20.413841, 20.519702, 20.626505, 20.734240, 20.842898, 20.952469, 21.062944, 21.174315, 21.286572, 21.399706, 21.513709, 21.628572, 21.744286, 21.860843, 21.978235, 22.096453, 22.215488, 22.335333, 22.455980, 22.577420, 22.699646, 22.822649, 22.946423, 23.070959, 23.196249, 23.322287, 23.449064, 23.576573, 23.704807, 23.833759, 23.963422, 24.093787, 24.224850, 24.356601, 24.489035, 24.622145, 24.755923, 24.890364, 25.025460, 25.161206, 25.297594, 25.434618, 25.572272, 25.710549, 25.849443, 25.988949, 26.129059, 26.269769, 26.411071, 26.552960, 26.695431, 26.838477, 26.982092, 27.126271, 27.271008, 27.416298, 27.562135, 27.708514, 27.855429, 28.002874, 28.150846, 28.299337, 28.448344, 28.597860, 28.747882, 28.898403, 29.049419, 29.200925, 29.352915, 29.505386, 29.658332, 29.811749, 29.965632, 30.119975, 30.274776, 30.430028, 30.585727, 30.741870, 30.898452, 31.055467, 31.212912, 31.370783, 31.529075, 31.687785, 31.846907, 32.006438, 32.166373, 32.326710, 32.487443, 32.648568, 32.810082, 32.971982, 33.134262, 33.296919, 33.459950, 33.623350, 33.787117, 33.951246, 34.115733, 34.280576, 34.445770, 34.611313, 34.777199, 34.943427, 35.109993, 35.276893, 35.444124, 35.611683, 35.779566, 35.947771, 36.116293, 36.285130, 36.454279, 36.623736, 36.793498, 36.963563, 37.133928, 37.304589, 37.475543, 37.646787, 37.818319, 37.990136, 38.162235, 38.334612, 38.507266, 38.680194, 38.853392, 39.026858, 39.200589, 39.374583, 39.548838, 39.723349, 39.898116, 40.073134, 40.248403, 40.423919, 40.599680, 40.775683, 40.951926, 41.128407, 41.305123, 41.482072, 41.659251, 41.836659, 42.014292, 42.192149, 42.370228, 42.548525, 42.727040, 42.905770, 43.084712, 43.263865, 43.443226, 43.622794, 43.802566, 43.982540, 44.162715, 44.343088, 44.523657, 44.704420, 44.885376, 45.066522, 45.247857, 45.429379, 45.611085, 45.792974, 45.975044, 46.157294, 46.339721, 46.522324, 46.705100, 46.888049, 47.071169, 47.254457, 47.437913, 47.621533, 47.805318, 47.989265, 48.173372, 48.357639, 48.542062, 48.726642, 48.911375, 49.096261, 49.281299, 49.466486, 49.651821, 49.837303, 50.022930, 50.208700, 50.394613, 50.580667, 50.766861, 50.953192, 51.139660, 51.326263, 51.513001, 51.699871, 51.886872, 52.074003, 52.261263, 52.448651, 52.636164, 52.823803, 53.011565, 53.199449, 53.387454, 53.575580, 53.763824, 53.952186, 54.140664, 54.329257, 54.517965, 54.706785, 54.895717, 55.084760, 55.273912, 55.463173, 55.652542, 55.842016, 56.031596, 56.221280, 56.411067, 56.600957, 56.790947, 56.981038, 57.171227, 57.361515, 57.551900, 57.742381, 57.932957, 58.123627, 58.314391, 58.505247, 58.696195, 58.887233, 59.078360, 59.269577, 59.460881, 59.652272, 59.843750, 60.035312, 60.226959, 60.418689, 60.610502, 60.802397, 60.994373, 61.186430, 61.378565, 61.570780, 61.763072, 61.955441, 62.147887, 62.340408, 62.533004, 62.725674, 62.918417, 63.111233, 63.304121, 63.497079, 63.690109, 63.883208, 64.076375, 64.269612, 64.462916, 64.656286, 64.849724, 65.043226, 65.236794, 65.430426, 65.624122, 65.817881, 66.011702, 66.205585, 66.399529, 66.593534, 66.787598, 66.981722, 67.175905, 67.370146, 67.564445, 67.758800, 67.953212, 68.147680, 68.342203, 68.536781, 68.731413, 68.926099, 69.120838, 69.315630, 69.510474, 69.705369, 69.900315, 70.095312, 70.290359, 70.485455, 70.480601, 70.475795, 70.471037, 70.466326, 70.461663, 70.457047, 70.452476, 70.447951, 70.443472, 70.439037, 70.434647, 70.430300, 70.425997, 70.421737, 70.417520, 70.413345, 70.409211, 70.405119, 70.401068, 70.397057, 70.393087, 70.389156, 70.385264, 70.381412, 70.377598, 70.373822, 70.370083, 70.366382, 70.362719, 70.359091, 70.355501, 70.351946, 70.348426, 70.344942, 70.341492, 70.338077, 70.334697, 70.331350, 70.328036, 70.324756, 70.321508, 70.318293, 70.315110, 70.311959, 70.308840, 70.305751, 70.302694, 70.299667, 70.296670, 70.293703, 70.290766, 70.287859, 70.284980, 70.282130, 70.279309, 70.276516, 70.273751, 70.271013, 70.268303, 70.265620, 70.262964, 70.260334, 70.257731, 70.255154, 70.252602, 70.250076, 70.247575, 70.245100, 70.242649, 70.240222, 70.237820, 70.235442, 70.233087, 70.230756, 70.228449, 70.226164, 70.223903, 70.221664, 70.219447, 70.217253, 70.215080, 70.212929, 70.210800, 70.208692, 70.206605, 70.204539, 70.202494, 70.200469, 70.198464, 70.196479, 70.194514, 70.192569, 70.190644, 70.188737, 70.186850, 70.184981, 70.183132, 70.181300, 70.179487, 70.177692, 70.175915, 70.174156, 70.172415, 70.170691, 70.168984, 70.167294, 70.165621, 70.163965, 70.162325, 70.160702, 70.159095, 70.157504, 70.155929, 70.154369, 70.152826, 70.151298, 70.149785, 70.148287, 70.146804, 70.145336, 70.143882, 70.142444, 70.141019, 70.139609, 70.138213, 70.136831, 70.135462, 70.134108, 70.132767, 70.131439, 70.130125, 70.128823, 70.127535, 70.126260, 70.124997, 70.123747, 70.122510, 70.121285, 70.120072, 70.118871, 70.117682, 70.116506, 70.115341, 70.114187, 70.113045, 70.111915, 70.110796, 70.109688, 70.108591, 70.107505, 70.106430, 70.105366, 70.104312, 70.103269, 70.102236, 70.101214, 70.100202, 70.099200, 70.098208, 70.097226, 70.096253, 70.095291, 70.094338, 70.093394, 70.092461, 70.091536, 70.090621, 70.089714, 70.088817, 70.087929, 70.087050, 70.086179, 70.085317, 70.084464, 70.083620, 70.082783, 70.081956, 70.081136, 70.080325, 70.079521, 70.078726, 70.077939, 70.077160, 70.076388, 70.075624, 70.074868, 70.074119, 70.073378, 70.072644, 70.071918, 70.071199, 70.070487, 70.069782, 70.069084, 70.068393, 70.067709, 70.067032, 70.066362, 70.065698, 70.065041 };
float UU[] = { 1081.739864, 1289.539148, -127.155395, 831.584024, 1083.848533, 1457.987802, 941.451273, 628.989325, 361.643500, 1888.747768, 704.164871, 2000.067425, 1465.299091, 1030.047569, 1074.692882, 724.507534, 830.933368, 1200.675574, 1125.377546, 2218.482699, 719.029802, 1382.630140, 1075.829135, 1088.388336, 1359.036713, 1397.522050, 1512.303377, 1901.519388, 1795.993939, 461.075379, 894.954930, 726.912721, 492.410584, 2360.368205, 2176.647408, 1161.674252, 2631.200397, 1126.917953, 1015.551323, 1475.678399, 1994.948745, 1359.807077, 2888.267080, 1600.620103, 1707.636788, 2375.502999, 1865.571389, 2667.914546, 1995.128954, 1881.103223, 2388.980728, 1523.848655, 2164.951119, 1742.505163, 2919.386996, 1806.212499, 1486.949495, 2222.966267, 2468.207187, 1055.041110, 1330.776448, 835.045202, 2421.988348, 2841.753897, 1728.937595, 1443.729363, 2390.205846, 2792.509416, 2000.433695, 1843.330094, 2483.422686, 1609.215649, 2391.047759, 2110.579270, 3359.373218, 2689.283061, 3029.381446, 2796.043689, 3065.708619, 2268.869642, 2117.561177, 1624.328335, 2983.618416, 2480.140468, 3134.263550, 2487.066555, 2681.203603, 2347.509799, 3311.083850, 3315.302319, 2477.479168, 3249.672292, 2800.326178, 2954.913318, 4080.174231, 2295.316311, 3518.169677, 2155.455430, 3041.974341, 3068.545711, 2705.986502, 2568.437885, 3423.227804, 3187.974588, 2760.628472, 3074.152729, 3236.597926, 2940.077559, 4321.075775, 2672.665891, 2881.425681, 3757.366117, 3334.834203, 3004.005235, 2642.978523, 3604.562544, 3818.728015, 4233.397512, 2168.483622, 3374.439529, 3997.678449, 3053.723083, 3063.599484, 3423.855700, 3721.012040, 2924.373089, 2992.180246, 3027.852131, 2884.390206, 3625.025698, 3264.092009, 3378.677091, 2717.452259, 3334.950373, 3834.753383, 3476.009746, 4534.440680, 4154.307576, 3340.674585, 3775.162709, 4167.634835, 3469.906218, 3887.184349, 4207.975150, 4154.933372, 3607.185772, 4056.858031, 3768.939890, 3870.017596, 3889.685698, 4367.729171, 4319.683367, 3575.848282, 4197.143211, 4413.768751, 4575.265062, 4267.062363, 4516.467615, 4307.451112, 3421.323197, 3626.880258, 4567.398028, 4561.325791, 4345.955904, 4489.733449, 3809.997197, 4738.946628, 3965.962986, 3931.795830, 4664.182255, 4887.263256, 5039.629370, 4633.419366, 4733.552402, 4363.927435, 4249.229091, 4582.247106, 4250.026299, 4552.912651, 3846.379503, 4349.038505, 4411.655478, 4926.533006, 4657.812470, 4296.070983, 4929.230390, 5118.896159, 4309.902627, 5486.520303, 5490.609461, 4999.663204, 4808.531895, 4529.029721, 4185.328163, 5258.312862, 4587.502278, 4455.453416, 5379.986773, 4386.996367, 5285.420601, 4418.772036, 5021.538277, 4405.980975, 5352.915848, 4972.272074, 5747.364776, 5501.629458, 5789.643935, 5272.789937, 5088.432705, 6571.432404, 6821.972020, 4849.257899, 5173.233734, 5656.535896, 5625.856865, 5467.484663, 4643.364101, 5354.097505, 4479.022920, 4639.836469, 4698.722608, 4846.955107, 5085.351427, 5650.115046, 5824.698572, 5914.177821, 5670.068135, 6252.913432, 4708.040198, 6160.254372, 5677.628669, 6350.048182, 5262.397449, 6184.825913, 5583.606859, 5277.521084, 5278.767863, 5370.012433, 5729.899116, 5533.680526, 6012.419404, 5531.851903, 5800.995044, 6446.197943, 5714.157153, 5668.824397, 6093.136652, 5982.147088, 6388.066267, 6343.186158, 6402.335016, 5228.555257, 6689.388107, 6132.007485, 6028.029408, 6557.551746, 5712.390154, 5698.441585, 6302.519348, 5658.507598, 5911.903015, 7799.442561, 6453.565451, 6042.021538, 6179.993251, 6136.925270, 6653.164380, 6027.762318, 7142.837651, 5167.203476, 7063.880384, 5278.458698, 5893.200078, 6863.801615, 6947.287887, 6844.729591, 6644.779153, 7661.603833, 7191.581002, 7857.584460, 6836.538622, 6637.891338, 6869.031969, 6362.988596, 6246.083689, 7026.437314, 7946.814634, 7520.395354, 7178.492483, 6487.651666, 6566.202330, 6264.513076, 6855.910130, 7269.768506, 6766.791134, 6590.671814, 6916.605771, 6580.643061, 6711.712796, 4733.918300, 5631.668207, 4645.983802, 4990.579326, 5992.772877, 5477.149876, 5056.515620, 4835.703196, 5233.736237, 3999.334915, 4476.096721, 5073.517759, 4687.234759, 5663.379077, 4911.963578, 5476.809405, 5235.889382, 5200.153825, 4919.637681, 4954.317691, 5693.529090, 4698.471848, 4643.648623, 5330.224588, 4650.005516, 4340.385684, 4338.728986, 5764.474223, 5820.125925, 4822.679041, 4259.810004, 5214.506507, 4234.572007, 5469.857854, 5473.567014, 5580.320373, 4851.403202, 4986.806665, 5611.044558, 5202.254076, 5766.081430, 4786.042624, 5087.748163, 6320.183521, 5707.281760, 5160.115124, 5590.876062, 4992.481780, 5178.510763, 5127.809274, 5828.071772, 4645.058801, 4928.960601, 5050.018807, 4366.406301, 5131.785556, 4295.542413, 5134.708229, 5137.886240, 5010.197127, 5001.258025, 5436.558888, 5178.434184, 5512.459375, 5019.960482, 5066.020943, 5032.586077, 4641.422342, 5302.013234, 4177.849738, 5337.112443, 5583.037821, 4753.496238, 4407.556671, 4404.524093, 4296.598589, 4643.129001, 4647.234174, 5726.313151, 5185.745789, 4734.934227, 4833.727717, 5437.113730, 4471.550848, 5196.410716, 5406.369919, 4656.194502, 5058.722500, 5801.014409, 4638.974136, 5011.153986, 5171.055577, 4912.981878, 5194.100014, 4597.444567, 4781.117670, 4620.825080, 5322.826439, 4125.196545, 4630.740153, 5766.374494, 5143.988019, 5121.528404, 4648.358637, 4008.708407, 5286.059868, 4687.228591, 5254.073706, 5497.713440, 4964.151643, 5435.706225, 5297.720500, 5126.984512, 4704.077759, 6130.892081, 5705.271174, 5037.201067, 4804.944656, 4164.159381, 5310.057694, 4821.638034, 5101.068751, 5049.701734, 5362.572497, 3701.145813, 4534.850139, 4922.546454, 3992.674570, 5451.017060, 5590.981199, 4940.964399, 4451.437431, 4775.780322, 6245.767085, 4215.045301, 5445.846782, 5194.720462, 4668.123847, 4845.146981, 4874.539692, 4386.554364, 4662.200228, 4642.210403, 5108.178934, 4683.085393, 5094.807894, 5646.603525, 4185.396957, 4469.173428, 4869.240873, 6217.063826, 4986.206208, 5030.225897, 4398.903948, 4116.972196, 4679.715666, 5679.970379, 4710.435527, 4706.475604, 5866.805869, 5958.829948, 5072.687596, 5197.554017, 5487.607357, 4618.602481, 3746.101231, 4609.511198, 5315.614416, 5072.493433, 5092.579184, 4558.561058, 5068.559059, 5084.112481, 4908.828351, 4374.484392, 5530.798573, 4415.197536, 4140.905988, 5252.567578, 5325.610577, 4400.019386, 4636.398667, 4685.060883, 4503.981544, 4666.921540, 5413.808662, 4579.701355, 4724.276794, 5597.108169, 5174.362839, 5011.126822, 5424.869988, 4872.154466, 4784.678243, 5012.937415, 5085.282954, 4257.570143, 5466.282754, 4766.741243, 5441.937115 };
float ZZ[] = { NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 8.938852, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 22.544206, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 35.776444, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 31.084889, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 41.663233, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 11.834604, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 26.958286, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 31.947298, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 32.867511, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 27.082593, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 28.975675, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 38.617487, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 41.842924, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 56.073160, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 41.116590, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 43.221783, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 55.228428, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 46.697927, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 51.835355, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 39.960960, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 59.451489, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 64.188861, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 55.049396, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 58.543453, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 69.021751, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 85.306573, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 61.258988, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 67.896307, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 74.247549, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 73.478930, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 73.740629, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 62.524488, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 63.634905, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 80.685051, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 63.212834, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 64.177718, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 70.428298, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 79.388499, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 66.928312, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 56.804781, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 68.609152, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 72.198138, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 55.649044, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 59.669409, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 80.473653, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 64.115937, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 89.933509, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 70.129161, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 60.053759, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN };
float XX_hat[] = { 0.000000, 0.328954, 0.512949, 0.790978, 1.091453, 1.426337, 1.706219, 1.952056, 2.168699, 2.535887, 8.927111, 9.237846, 9.491998, 9.700082, 9.910551, 10.083896, 10.266151, 10.483557, 10.691259, 11.006194, 16.282255, 16.457696, 16.600702, 16.743533, 16.912002, 17.082634, 17.263038, 17.480559, 17.685353, 17.754607, 22.685000, 22.730842, 22.752774, 22.961283, 23.149335, 23.234009, 23.464789, 23.542833, 23.608960, 23.720438, 25.183483, 25.267629, 25.503779, 25.608803, 25.723479, 25.903794, 26.031314, 26.237792, 26.374927, 26.499288, 28.606673, 28.672992, 28.802757, 28.888980, 29.092029, 29.181730, 29.238607, 29.368518, 29.521653, 29.531941, 27.871936, 27.876721, 28.040153, 28.243927, 28.334381, 28.395410, 28.550477, 28.744223, 28.856824, 28.952589, 28.954385, 29.025763, 29.174610, 29.293922, 29.536920, 29.710479, 29.916312, 30.096754, 30.302357, 30.426220, 30.613745, 30.670041, 30.861702, 31.001099, 31.204514, 31.341176, 31.495885, 31.615677, 31.830628, 32.043852, 32.202213, 32.405158, 32.561139, 32.731019, 33.011726, 33.111140, 33.331846, 33.414073, 33.584130, 33.755143, 33.646396, 33.766776, 33.971431, 34.150514, 34.285072, 34.449637, 34.628800, 34.776520, 35.060862, 35.177520, 35.132716, 35.357125, 35.537037, 35.682068, 35.789545, 35.992106, 36.214057, 36.475256, 36.527352, 36.699523, 36.971382, 37.107041, 37.242330, 37.412293, 37.610271, 37.726605, 37.848557, 37.972857, 38.081567, 38.263254, 38.472210, 38.625356, 38.710847, 38.857234, 39.052137, 39.209216, 39.470568, 39.691293, 39.828448, 40.007680, 40.472138, 40.614407, 40.796981, 41.009809, 41.215204, 41.363771, 41.555819, 41.717155, 41.886985, 42.057084, 42.258270, 42.467655, 42.600563, 42.794272, 43.007706, 43.235156, 43.429510, 43.646862, 43.841139, 43.944859, 44.058904, 44.275055, 44.488437, 44.678148, 44.880340, 45.012536, 45.236305, 45.380539, 45.519913, 45.731132, 46.047492, 46.290980, 46.491412, 46.699853, 46.869248, 47.025478, 47.213448, 47.366316, 47.547944, 47.657103, 47.806716, 47.969814, 48.182769, 48.366723, 48.512663, 48.720459, 48.945144, 49.086683, 49.344468, 49.600085, 49.817665, 50.000342, 50.153242, 50.270242, 50.493371, 50.647187, 50.786261, 51.016397, 51.144932, 51.362025, 51.423248, 51.611169, 51.735655, 51.953590, 52.131282, 52.384705, 52.611021, 52.863875, 53.062516, 53.240734, 53.595462, 53.941704, 54.087213, 54.263664, 54.486681, 54.704400, 54.904105, 55.019400, 55.204616, 55.300472, 55.451065, 55.566426, 55.695457, 55.847038, 56.053579, 56.275513, 56.504176, 56.706141, 56.964371, 57.065531, 57.301763, 57.496508, 57.756548, 57.905222, 58.144652, 58.321566, 58.466103, 58.609319, 58.760227, 58.945614, 59.107456, 59.317623, 59.477632, 59.662955, 59.910945, 60.083252, 60.249302, 60.456122, 60.649776, 60.882085, 61.134067, 61.362960, 61.472186, 61.726402, 61.922339, 62.105919, 62.340615, 62.488448, 62.633407, 62.837325, 63.043886, 63.204638, 63.552535, 63.762367, 63.928945, 64.107655, 64.280271, 64.502785, 64.660533, 64.928211, 64.984859, 65.241398, 65.316830, 65.452982, 65.684832, 65.922713, 66.147958, 66.350957, 66.653608, 66.906230, 67.224758, 67.436164, 67.625592, 67.836239, 67.994175, 68.138842, 68.360097, 68.671178, 68.936505, 69.164990, 69.334835, 69.498107, 69.629577, 69.818872, 70.047660, 70.223863, 70.380691, 70.568545, 70.720924, 70.884886, 70.855934, 70.910541, 70.866034, 70.856432, 70.947145, 70.985388, 70.981186, 70.954944, 70.968769, 70.859014, 70.805048, 70.804349, 70.765029, 70.823717, 70.806676, 70.846290, 70.861416, 70.872817, 70.856053, 70.842924, 70.884489, 70.845492, 70.801402, 70.826410, 70.783147, 70.709354, 70.636133, 70.706219, 70.781170, 70.755626, 70.658209, 70.673077, 70.589804, 70.630892, 70.671939, 70.723252, 70.701160, 70.692829, 70.747005, 70.759760, 70.850473, 70.820573, 70.821142, 70.944949, 71.006227, 71.012177, 71.061142, 71.049779, 71.057133, 71.059342, 71.114434, 71.067795, 71.050013, 71.044515, 70.970710, 70.974182, 70.893994, 70.898525, 70.903329, 70.895315, 70.872198, 70.907132, 70.915904, 70.957991, 70.950407, 70.947505, 70.941289, 70.896018, 70.917259, 70.825872, 70.850434, 70.900234, 70.866581, 70.798671, 70.731136, 70.653485, 70.611263, 70.569874, 70.636806, 70.649013, 70.634283, 70.611313, 70.648911, 70.589577, 70.603323, 70.637926, 70.597167, 70.597067, 70.671198, 70.628383, 70.615585, 70.626535, 70.611568, 70.624862, 70.578358, 70.550686, 70.507262, 70.534472, 70.441647, 70.400304, 70.444910, 70.454859, 70.462464, 70.422675, 70.319319, 70.344732, 70.310007, 70.332315, 70.378763, 70.371390, 70.407572, 70.433269, 70.441635, 70.407626, 70.516639, 70.582000, 70.579900, 70.554595, 70.465465, 70.491816, 70.472571, 70.477953, 70.478143, 70.509619, 70.374637, 70.324376, 70.313387, 70.209521, 70.252527, 70.309100, 70.270481, 70.212920, 70.188368, 70.311061, 70.229455, 70.271745, 70.288500, 70.252427, 70.234418, 70.219528, 70.134849, 70.099721, 70.062945, 70.073133, 70.040710, 70.049784, 70.113946, 70.031347, 69.977951, 69.965095, 70.108034, 70.105575, 70.107542, 70.046357, 69.957590, 69.925986, 69.994723, 69.965819, 69.936809, 70.024121, 70.107716, 70.113908, 70.132524, 70.179960, 70.140020, 70.013230, 69.974049, 70.005870, 70.013061, 70.022188, 70.017796, 70.024474, 70.032641, 70.023197, 69.960414, 70.013889, 69.955270, 69.869808, 69.896367, 69.929964, 69.871184, 69.836112, 69.806257, 69.758592, 69.727698, 69.771802, 69.732054, 69.707162, 69.769801, 69.789539, 69.773296, 69.818050, 69.807085, 69.787482, 69.790901, 69.801520, 69.729262, 69.778598, 69.757486, 69.804105 };
float P00[] = { 40000.000000, 39204.002500, 38423.845350, 37659.213328, 36909.797482, 36175.295012, 35455.409142, 34749.849000, 34058.329505, 33380.571248, 62.380830, 61.141951, 59.927727, 58.737665, 57.571285, 56.428117, 55.307697, 54.209574, 53.133304, 52.078451, 28.097216, 27.540581, 26.995024, 26.460323, 25.936262, 25.422631, 24.919220, 24.425828, 23.942254, 23.468303, 16.814887, 16.482771, 16.157264, 15.838234, 15.525553, 15.219095, 14.918735, 14.624352, 14.335828, 14.053045, 11.287880, 11.065751, 10.848042, 10.634666, 10.425537, 10.220568, 10.019679, 9.822787, 9.629814, 9.440681, 8.061521, 7.903597, 7.748815, 7.597114, 7.448431, 7.302707, 7.159884, 7.019902, 6.882706, 6.748240, 5.983064, 5.866501, 5.752257, 5.640287, 5.530546, 5.422988, 5.317570, 5.214251, 5.112987, 5.013739, 4.557923, 4.469721, 4.383273, 4.298546, 4.215505, 4.134116, 4.054348, 3.976166, 3.899540, 3.824440, 3.538477, 3.470562, 3.403997, 3.338758, 3.274817, 3.212148, 3.150726, 3.090527, 3.031525, 2.973698, 2.786948, 2.733988, 2.682081, 2.631208, 2.581347, 2.532478, 2.484582, 2.437638, 2.391629, 2.346536, 2.220541, 2.178852, 2.137993, 2.097947, 2.058698, 2.020230, 1.982527, 1.945575, 1.909358, 1.873862, 1.786504, 1.753452, 1.721059, 1.689310, 1.658192, 1.627694, 1.597803, 1.568507, 1.539794, 1.511652, 1.449648, 1.423300, 1.397476, 1.372166, 1.347360, 1.323048, 1.299219, 1.275865, 1.252975, 1.230541, 1.185627, 1.164533, 1.143858, 1.123596, 1.103736, 1.084272, 1.065195, 1.046497, 1.028172, 1.010211, 0.977090, 0.960146, 0.943539, 0.927263, 0.911310, 0.895675, 0.880351, 0.865332, 0.850612, 0.836185, 0.811373, 0.797727, 0.784352, 0.771244, 0.758396, 0.745804, 0.733462, 0.721366, 0.709511, 0.697892, 0.679045, 0.668032, 0.657238, 0.646659, 0.636291, 0.626129, 0.616169, 0.606407, 0.596839, 0.587462, 0.572970, 0.564068, 0.555343, 0.546792, 0.538411, 0.530196, 0.522146, 0.514255, 0.506521, 0.498941, 0.487677, 0.480473, 0.473411, 0.466490, 0.459707, 0.453059, 0.446543, 0.440157, 0.433898, 0.427763, 0.418924, 0.413087, 0.407367, 0.401760, 0.396265, 0.390879, 0.385601, 0.380427, 0.375357, 0.370387, 0.363391, 0.358660, 0.354023, 0.349478, 0.345023, 0.340657, 0.336378, 0.332184, 0.328074, 0.324045, 0.318465, 0.314628, 0.310867, 0.307181, 0.303568, 0.300027, 0.296556, 0.293155, 0.289821, 0.286553, 0.282072, 0.278959, 0.275908, 0.272917, 0.269986, 0.267113, 0.264298, 0.261538, 0.258834, 0.256183, 0.252560, 0.250034, 0.247558, 0.245132, 0.242754, 0.240423, 0.238139, 0.235900, 0.233705, 0.231555, 0.228607, 0.226558, 0.224550, 0.222581, 0.220652, 0.218761, 0.216907, 0.215091, 0.213311, 0.211566, 0.209153, 0.207491, 0.205862, 0.204265, 0.202701, 0.201167, 0.199664, 0.198190, 0.196746, 0.195331, 0.193344, 0.191996, 0.190676, 0.189381, 0.188113, 0.186869, 0.185650, 0.184456, 0.183285, 0.182138, 0.180491, 0.179399, 0.178329, 0.177280, 0.176252, 0.175245, 0.174257, 0.173290, 0.172341, 0.171412, 0.170037, 0.169153, 0.168287, 0.167438, 0.166606, 0.165790, 0.164991, 0.164208, 0.163440, 0.162688, 0.161532, 0.160817, 0.160117, 0.159431, 0.158758, 0.158099, 0.157452, 0.156819, 0.156198, 0.155590, 0.154610, 0.154034, 0.153468, 0.152914, 0.152371, 0.151839, 0.151318, 0.150806, 0.150305, 0.149814, 0.148977, 0.148512, 0.148057, 0.147611, 0.147173, 0.146744, 0.146324, 0.145912, 0.145509, 0.145113, 0.144391, 0.144018, 0.143652, 0.143293, 0.142941, 0.142597, 0.142259, 0.141928, 0.141604, 0.141286, 0.140657, 0.140358, 0.140065, 0.139778, 0.139496, 0.139220, 0.138950, 0.138685, 0.138425, 0.138170, 0.137617, 0.137378, 0.137144, 0.136915, 0.136691, 0.136471, 0.136255, 0.136043, 0.135836, 0.135633, 0.135141, 0.134952, 0.134766, 0.134584, 0.134406, 0.134231, 0.134060, 0.133892, 0.133728, 0.133567, 0.133125, 0.132975, 0.132829, 0.132686, 0.132545, 0.132408, 0.132273, 0.132141, 0.132011, 0.131884, 0.131482, 0.131366, 0.131252, 0.131140, 0.131030, 0.130923, 0.130817, 0.130714, 0.130613, 0.130514, 0.130145, 0.130055, 0.129967, 0.129880, 0.129796, 0.129713, 0.129632, 0.129552, 0.129474, 0.129397, 0.129055, 0.128987, 0.128920, 0.128855, 0.128791, 0.128728, 0.128666, 0.128605, 0.128546, 0.128488, 0.128168, 0.128117, 0.128068, 0.128019, 0.127972, 0.127925, 0.127879, 0.127835, 0.127791, 0.127748, 0.127445, 0.127409, 0.127373, 0.127339, 0.127305, 0.127271, 0.127239, 0.127207, 0.127175, 0.127144, 0.126856, 0.126832, 0.126808, 0.126784, 0.126761, 0.126739, 0.126717, 0.126695, 0.126674, 0.126653, 0.126376, 0.126362, 0.126347, 0.126333, 0.126319, 0.126305, 0.126291, 0.126278, 0.126265, 0.126253, 0.125986, 0.125979, 0.125972, 0.125965, 0.125958, 0.125952, 0.125945, 0.125939, 0.125933, 0.125927, 0.125667, 0.125667, 0.125666, 0.125665, 0.125664, 0.125664, 0.125663, 0.125662, 0.125662, 0.125661, 0.125408, 0.125413, 0.125417, 0.125421, 0.125425, 0.125429, 0.125433, 0.125437, 0.125441, 0.125445, 0.125197, 0.125206, 0.125214, 0.125222, 0.125230, 0.125238, 0.125246, 0.125254, 0.125261, 0.125268, 0.125025, 0.125037, 0.125049, 0.125060, 0.125071, 0.125083, 0.125093, 0.125104, 0.125114, 0.125125, 0.124885, 0.124899, 0.124914, 0.124928, 0.124942, 0.124956, 0.124969, 0.124982, 0.124995, 0.125008 };
float Fx[] = {};
float Fu[] = {};

void init_filter()
{
    R(0, 0) = 62.5;
    ekf.C[0] = 1;
    ekf.C[1] = 10000;
    ekf.C[2] = 100;
    ekf.C[3] = 20;
    ekf.X[0] = 0.0;
    ekf.P(0, 0) = 40000.0;
    ekf.Cov_U(0, 0) = 250000.0;
    ekf.setMeasurementFunction(h,1);
}
// <DATA_END>


void test_ctor_dtor()
{
    ekf.setMeasurementFunction(h, 1);
    ekf.X[0] = EXTERNAL_TEMPERATURE; // initial temperature
    ekf.P.fill(0); // initial covariance
    ekf.Cov_U.fill(PROCESS_NOISE*PROCESS_NOISE);
    R.fill(MEASURE_NOISE*MEASURE_NOISE);
    ekf.C[0] = TIME_STEP;
    ekf.C[1] = THERMAL_INERTIA;
    ekf.C[2] = THERMAL_LOSSES;
    ekf.C[3] = EXTERNAL_TEMPERATURE;

    TEST_ASSERT_EQUAL(1, ekf.X.size());
    TEST_ASSERT_EQUAL(1, ekf.U.size());
    TEST_ASSERT_EQUAL(4, ekf.C.size());

    //check if everything is initialized correctly
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE, ekf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0, ekf.P(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, PROCESS_NOISE*PROCESS_NOISE, ekf.Cov_U[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, MEASURE_NOISE*MEASURE_NOISE, R(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, TIME_STEP, ekf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_INERTIA, ekf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_LOSSES, ekf.C[2]);
}

void test_predict()
{
    ekf.U[0] = 10; // heating power
    ekf.predict(); // first prediction is considered with step time 0, if you don't want that, you can set ekf.initted to true before calling predict
    TEST_ASSERT_FLOAT_WITHIN(1e-6, PROCESS_NOISE*PROCESS_NOISE, ekf.Cov_U[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, MEASURE_NOISE*MEASURE_NOISE, R(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, TIME_STEP, ekf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_INERTIA, ekf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_LOSSES, ekf.C[2]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE + 1, ekf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0.0025, ekf.P(0, 0));
}

void test_update()
{
    ekf.X[0] = EXTERNAL_TEMPERATURE; // reset temperature
    ekf.P.fill(1); // initial covariance
    R.fill(MEASURE_NOISE*MEASURE_NOISE);
    ekf.C[1] = THERMAL_INERTIA;
    ekf.C[2] = THERMAL_LOSSES;
    ekf.C[3] = EXTERNAL_TEMPERATURE;
    Z[0] = EXTERNAL_TEMPERATURE + 5; // measurement
    ekf.update(Z, R);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 20.19231, ekf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0.9615384, ekf.P(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, PROCESS_NOISE*PROCESS_NOISE, ekf.Cov_U[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, MEASURE_NOISE*MEASURE_NOISE, R(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, TIME_STEP, ekf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_INERTIA, ekf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_LOSSES, ekf.C[2]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE, ekf.C[3]);
}

// #include <iostream>
void test_DATA()
{
    init_filter();
    ekf.setMeasurementFunction(h, 1);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 1.0, ekf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 10000.0, ekf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 100.0, ekf.C[2]);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 20.0, ekf.C[3]);

    for (int i = 1; i < sizeof(ZZ)/sizeof(ZZ[0]); i++)
    {
        ekf.U[0] = UU[i];
        ekf.predict();
        if (!isnan(ZZ[i]))
        {
            Z[0] = ZZ[i];
            ekf.update(Z, R);
        }
        TEST_ASSERT_TRUE(fabs((XX_hat[i] - ekf.X[0])/XX_hat[i]) < 1e-5);
        TEST_ASSERT_TRUE(fabs((sqrt(P00[i]) - sqrt(ekf.P(0, 0)))/sqrt(P00[i])) < 1e-5);
    }
}

void setUp() {
    // Initialisation avant chaque test (laisser vide si inutile)
}

void tearDown() {
    // Nettoyage après chaque test (laisser vide si inutile)
}


void setup() {
    #ifndef NATIVE
    delay(2000); // Permet d'attendre que la liaison série soit établie
    #endif
    UNITY_BEGIN();
    RUN_TEST(test_ctor_dtor);
    RUN_TEST(test_predict);
    RUN_TEST(test_update);
    RUN_TEST(test_DATA);
    UNITY_END();
}

void loop() {
}

#ifdef NATIVE
int main(int argc, char **argv) {
    setup();
}
#endif

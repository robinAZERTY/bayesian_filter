/*
to run all the test use the following command
pio test -e native
*/


/*
To test the basic functionalities of the EKF, here is an example of a simple one-dimensional problem.
Temperature estimation in a controlled environment (such as an oven with a heating element).
The scenario is as follows:
You have an oven, and you want to precisely control its temperature using a heating element.
Let's assume you only have a temperature sensor that is highly imprecise, with significant noise and a low sampling rate.
You also have a physical model of the oven, allowing you to predict the temperature based on the heating power.

The constants characterizing the oven are as follows:
- Thermal inertia: the oven heats up and cools down slowly.
- Thermal losses: the temperature inside the oven tends to equalize naturally with the external temperature.
- External temperature: the external temperature is a known value.

x: oven temperature
u: heating power
c: oven parameters (time step, thermal inertia, thermal losses, external temperature)

The oven temperature evolves according to the following formula:
f(x, u, c) = x + u * c0 / c1 - c0 * (x - c3) / c2

The measurement function is simply the temperature measured by the sensor:
h(x, c) = x

Note: An Extended Kalman Filter (EKF) may not be the ideal solution for this problem since it is linear,
but it should be a good way to check that the EKF is functioning correctly for simple problems.
*/


#include <unity.h>
#define EVERYTHING_PUBLIC
#include <ekf.hpp>

#ifdef NATIVE
#define NAN std::nan("")
#endif

#define TIME_STEP 10
#define THERMAL_INERTIA 100
#define THERMAL_LOSSES 2
#define EXTERNAL_TEMPERATURE 20

#define MEASURE_NOISE 5
#define PROCESS_NOISE 0.5

// Note : In ekf, c[0] is always the time step, c[1:] are the remaining parameters

template <typename T>
internal::tmp<Vector<T>> && f(const Vector<T> &x, const Vector<T> &u, const Vector<T> &c)
{
    auto *ret = internal::tmp<Vector<T>>::get(x.size()); // ask for a temporary variable of the same size as x
    (*ret)[0] = x[0] + c[0] *(u[0]/c[1] - (x[0]-c[3])/c[2]); // compute the new temperature
    return internal::move(*ret); // return the temporary variable
}

// simple measurement function
template <typename T>
internal::tmp<Vector<T>> && h(const Vector<T> &x, const Vector<T> &c)
{
    auto *ret = internal::tmp<Vector<T>>::get(1); // ask for a temporary variable of size 2
    (*ret)[0] = x[0];
    return internal::move(*ret);
}

Ekf<1, 1, 4, 1, double> ekf(f); // 1 state, 1 command, 4 parameters

Vector<double> Z(1); // measurement
symMatrix<double> R(1, 1); // measurement noise

// <DATA_START>
double Time[] = { 0.000000, 1.000000, 2.000000, 3.000000, 4.000000, 5.000000, 6.000000, 7.000000, 8.000000, 9.000000, 10.000000, 11.000000, 12.000000, 13.000000, 14.000000, 15.000000, 16.000000, 17.000000, 18.000000, 19.000000, 20.000000, 21.000000, 22.000000, 23.000000, 24.000000, 25.000000, 26.000000, 27.000000, 28.000000, 29.000000, 30.000000, 31.000000, 32.000000, 33.000000, 34.000000, 35.000000, 36.000000, 37.000000, 38.000000, 39.000000, 40.000000, 41.000000, 42.000000, 43.000000, 44.000000, 45.000000, 46.000000, 47.000000, 48.000000, 49.000000, 50.000000, 51.000000, 52.000000, 53.000000, 54.000000, 55.000000, 56.000000, 57.000000, 58.000000, 59.000000, 60.000000, 61.000000, 62.000000, 63.000000, 64.000000, 65.000000, 66.000000, 67.000000, 68.000000, 69.000000, 70.000000, 71.000000, 72.000000, 73.000000, 74.000000, 75.000000, 76.000000, 77.000000, 78.000000, 79.000000, 80.000000, 81.000000, 82.000000, 83.000000, 84.000000, 85.000000, 86.000000, 87.000000, 88.000000, 89.000000, 90.000000, 91.000000, 92.000000, 93.000000, 94.000000, 95.000000, 96.000000, 97.000000, 98.000000, 99.000000, 100.000000, 101.000000, 102.000000, 103.000000, 104.000000, 105.000000, 106.000000, 107.000000, 108.000000, 109.000000, 110.000000, 111.000000, 112.000000, 113.000000, 114.000000, 115.000000, 116.000000, 117.000000, 118.000000, 119.000000, 120.000000, 121.000000, 122.000000, 123.000000, 124.000000, 125.000000, 126.000000, 127.000000, 128.000000, 129.000000, 130.000000, 131.000000, 132.000000, 133.000000, 134.000000, 135.000000, 136.000000, 137.000000, 138.000000, 139.000000, 140.000000, 141.000000, 142.000000, 143.000000, 144.000000, 145.000000, 146.000000, 147.000000, 148.000000, 149.000000, 150.000000, 151.000000, 152.000000, 153.000000, 154.000000, 155.000000, 156.000000, 157.000000, 158.000000, 159.000000, 160.000000, 161.000000, 162.000000, 163.000000, 164.000000, 165.000000, 166.000000, 167.000000, 168.000000, 169.000000, 170.000000, 171.000000, 172.000000, 173.000000, 174.000000, 175.000000, 176.000000, 177.000000, 178.000000, 179.000000, 180.000000, 181.000000, 182.000000, 183.000000, 184.000000, 185.000000, 186.000000, 187.000000, 188.000000, 189.000000, 190.000000, 191.000000, 192.000000, 193.000000, 194.000000, 195.000000, 196.000000, 197.000000, 198.000000, 199.000000, 200.000000, 201.000000, 202.000000, 203.000000, 204.000000, 205.000000, 206.000000, 207.000000, 208.000000, 209.000000, 210.000000, 211.000000, 212.000000, 213.000000, 214.000000, 215.000000, 216.000000, 217.000000, 218.000000, 219.000000, 220.000000, 221.000000, 222.000000, 223.000000, 224.000000, 225.000000, 226.000000, 227.000000, 228.000000, 229.000000, 230.000000, 231.000000, 232.000000, 233.000000, 234.000000, 235.000000, 236.000000, 237.000000, 238.000000, 239.000000, 240.000000, 241.000000, 242.000000, 243.000000, 244.000000, 245.000000, 246.000000, 247.000000, 248.000000, 249.000000, 250.000000, 251.000000, 252.000000, 253.000000, 254.000000, 255.000000, 256.000000, 257.000000, 258.000000, 259.000000, 260.000000, 261.000000, 262.000000, 263.000000, 264.000000, 265.000000, 266.000000, 267.000000, 268.000000, 269.000000, 270.000000, 271.000000, 272.000000, 273.000000, 274.000000, 275.000000, 276.000000, 277.000000, 278.000000, 279.000000, 280.000000, 281.000000, 282.000000, 283.000000, 284.000000, 285.000000, 286.000000, 287.000000, 288.000000, 289.000000, 290.000000, 291.000000, 292.000000, 293.000000, 294.000000, 295.000000, 296.000000, 297.000000, 298.000000, 299.000000, 300.000000, 301.000000, 302.000000, 303.000000, 304.000000, 305.000000, 306.000000, 307.000000, 308.000000, 309.000000, 310.000000, 311.000000, 312.000000, 313.000000, 314.000000, 315.000000, 316.000000, 317.000000, 318.000000, 319.000000, 320.000000, 321.000000, 322.000000, 323.000000, 324.000000, 325.000000, 326.000000, 327.000000, 328.000000, 329.000000, 330.000000, 331.000000, 332.000000, 333.000000, 334.000000, 335.000000, 336.000000, 337.000000, 338.000000, 339.000000, 340.000000, 341.000000, 342.000000, 343.000000, 344.000000, 345.000000, 346.000000, 347.000000, 348.000000, 349.000000, 350.000000, 351.000000, 352.000000, 353.000000, 354.000000, 355.000000, 356.000000, 357.000000, 358.000000, 359.000000, 360.000000, 361.000000, 362.000000, 363.000000, 364.000000, 365.000000, 366.000000, 367.000000, 368.000000, 369.000000, 370.000000, 371.000000, 372.000000, 373.000000, 374.000000, 375.000000, 376.000000, 377.000000, 378.000000, 379.000000, 380.000000, 381.000000, 382.000000, 383.000000, 384.000000, 385.000000, 386.000000, 387.000000, 388.000000, 389.000000, 390.000000, 391.000000, 392.000000, 393.000000, 394.000000, 395.000000, 396.000000, 397.000000, 398.000000, 399.000000, 400.000000, 401.000000, 402.000000, 403.000000, 404.000000, 405.000000, 406.000000, 407.000000, 408.000000, 409.000000, 410.000000, 411.000000, 412.000000, 413.000000, 414.000000, 415.000000, 416.000000, 417.000000, 418.000000, 419.000000, 420.000000, 421.000000, 422.000000, 423.000000, 424.000000, 425.000000, 426.000000, 427.000000, 428.000000, 429.000000, 430.000000, 431.000000, 432.000000, 433.000000, 434.000000, 435.000000, 436.000000, 437.000000, 438.000000, 439.000000, 440.000000, 441.000000, 442.000000, 443.000000, 444.000000, 445.000000, 446.000000, 447.000000, 448.000000, 449.000000, 450.000000, 451.000000, 452.000000, 453.000000, 454.000000, 455.000000, 456.000000, 457.000000, 458.000000, 459.000000, 460.000000, 461.000000, 462.000000, 463.000000, 464.000000, 465.000000, 466.000000, 467.000000, 468.000000, 469.000000, 470.000000, 471.000000, 472.000000, 473.000000, 474.000000, 475.000000, 476.000000, 477.000000, 478.000000, 479.000000, 480.000000, 481.000000, 482.000000, 483.000000, 484.000000, 485.000000, 486.000000, 487.000000, 488.000000, 489.000000, 490.000000, 491.000000, 492.000000, 493.000000, 494.000000, 495.000000, 496.000000, 497.000000, 498.000000, 499.000000 };
double XX[] = { 20.000000, 20.102000, 20.204980, 20.308930, 20.413841, 20.519702, 20.626505, 20.734240, 20.842898, 20.952469, 21.062944, 21.174315, 21.286572, 21.399706, 21.513709, 21.628572, 21.744286, 21.860843, 21.978235, 22.096453, 22.215488, 22.335333, 22.455980, 22.577420, 22.699646, 22.822649, 22.946423, 23.070959, 23.196249, 23.322287, 23.449064, 23.576573, 23.704807, 23.833759, 23.963422, 24.093787, 24.224850, 24.356601, 24.489035, 24.622145, 24.755923, 24.890364, 25.025460, 25.161206, 25.297594, 25.434618, 25.572272, 25.710549, 25.849443, 25.988949, 26.129059, 26.269769, 26.411071, 26.552960, 26.695431, 26.838477, 26.982092, 27.126271, 27.271008, 27.416298, 27.562135, 27.708514, 27.855429, 28.002874, 28.150846, 28.299337, 28.448344, 28.597860, 28.747882, 28.898403, 29.049419, 29.200925, 29.352915, 29.505386, 29.658332, 29.811749, 29.965632, 30.119975, 30.274776, 30.430028, 30.585727, 30.741870, 30.898452, 31.055467, 31.212912, 31.370783, 31.529075, 31.687785, 31.846907, 32.006438, 32.166373, 32.326710, 32.487443, 32.648568, 32.810082, 32.971982, 33.134262, 33.296919, 33.459950, 33.623350, 33.787117, 33.951246, 34.115733, 34.280576, 34.445770, 34.611313, 34.777199, 34.943427, 35.109993, 35.276893, 35.444124, 35.611683, 35.779566, 35.947771, 36.116293, 36.285130, 36.454279, 36.623736, 36.793498, 36.963563, 37.133928, 37.304589, 37.475543, 37.646787, 37.818319, 37.990136, 38.162235, 38.334612, 38.507266, 38.680194, 38.853392, 39.026858, 39.200589, 39.374583, 39.548838, 39.723349, 39.898116, 40.073134, 40.248403, 40.423919, 40.599680, 40.775683, 40.951926, 41.128407, 41.305123, 41.482072, 41.659251, 41.836659, 42.014292, 42.192149, 42.370228, 42.548525, 42.727040, 42.905770, 43.084712, 43.263865, 43.443226, 43.622794, 43.802566, 43.982540, 44.162715, 44.343088, 44.523657, 44.704420, 44.885376, 45.066522, 45.247857, 45.429379, 45.611085, 45.792974, 45.975044, 46.157294, 46.339721, 46.522324, 46.705100, 46.888049, 47.071169, 47.254457, 47.437913, 47.621533, 47.805318, 47.989265, 48.173372, 48.357639, 48.542062, 48.726642, 48.911375, 49.096261, 49.281299, 49.466486, 49.651821, 49.837303, 50.022930, 50.208700, 50.394613, 50.580667, 50.766861, 50.953192, 51.139660, 51.326263, 51.513001, 51.699871, 51.886872, 52.074003, 52.261263, 52.448651, 52.636164, 52.823803, 53.011565, 53.199449, 53.387454, 53.575580, 53.763824, 53.952186, 54.140664, 54.329257, 54.517965, 54.706785, 54.895717, 55.084760, 55.273912, 55.463173, 55.652542, 55.842016, 56.031596, 56.221280, 56.411067, 56.600957, 56.790947, 56.981038, 57.171227, 57.361515, 57.551900, 57.742381, 57.932957, 58.123627, 58.314391, 58.505247, 58.696195, 58.887233, 59.078360, 59.269577, 59.460881, 59.652272, 59.843750, 60.035312, 60.226959, 60.418689, 60.610502, 60.802397, 60.994373, 61.186430, 61.378565, 61.570780, 61.763072, 61.955441, 62.147887, 62.340408, 62.533004, 62.725674, 62.918417, 63.111233, 63.304121, 63.497079, 63.690109, 63.883208, 64.076375, 64.269612, 64.462916, 64.656286, 64.849724, 65.043226, 65.236794, 65.430426, 65.624122, 65.817881, 66.011702, 66.205585, 66.399529, 66.593534, 66.787598, 66.981722, 67.175905, 67.370146, 67.564445, 67.758800, 67.953212, 68.147680, 68.342203, 68.536781, 68.731413, 68.926099, 69.120838, 69.315630, 69.510474, 69.705369, 69.900315, 70.095312, 70.290359, 70.485455, 70.480601, 70.475795, 70.471037, 70.466326, 70.461663, 70.457047, 70.452476, 70.447951, 70.443472, 70.439037, 70.434647, 70.430300, 70.425997, 70.421737, 70.417520, 70.413345, 70.409211, 70.405119, 70.401068, 70.397057, 70.393087, 70.389156, 70.385264, 70.381412, 70.377598, 70.373822, 70.370083, 70.366382, 70.362719, 70.359091, 70.355501, 70.351946, 70.348426, 70.344942, 70.341492, 70.338077, 70.334697, 70.331350, 70.328036, 70.324756, 70.321508, 70.318293, 70.315110, 70.311959, 70.308840, 70.305751, 70.302694, 70.299667, 70.296670, 70.293703, 70.290766, 70.287859, 70.284980, 70.282130, 70.279309, 70.276516, 70.273751, 70.271013, 70.268303, 70.265620, 70.262964, 70.260334, 70.257731, 70.255154, 70.252602, 70.250076, 70.247575, 70.245100, 70.242649, 70.240222, 70.237820, 70.235442, 70.233087, 70.230756, 70.228449, 70.226164, 70.223903, 70.221664, 70.219447, 70.217253, 70.215080, 70.212929, 70.210800, 70.208692, 70.206605, 70.204539, 70.202494, 70.200469, 70.198464, 70.196479, 70.194514, 70.192569, 70.190644, 70.188737, 70.186850, 70.184981, 70.183132, 70.181300, 70.179487, 70.177692, 70.175915, 70.174156, 70.172415, 70.170691, 70.168984, 70.167294, 70.165621, 70.163965, 70.162325, 70.160702, 70.159095, 70.157504, 70.155929, 70.154369, 70.152826, 70.151298, 70.149785, 70.148287, 70.146804, 70.145336, 70.143882, 70.142444, 70.141019, 70.139609, 70.138213, 70.136831, 70.135462, 70.134108, 70.132767, 70.131439, 70.130125, 70.128823, 70.127535, 70.126260, 70.124997, 70.123747, 70.122510, 70.121285, 70.120072, 70.118871, 70.117682, 70.116506, 70.115341, 70.114187, 70.113045, 70.111915, 70.110796, 70.109688, 70.108591, 70.107505, 70.106430, 70.105366, 70.104312, 70.103269, 70.102236, 70.101214, 70.100202, 70.099200, 70.098208, 70.097226, 70.096253, 70.095291, 70.094338, 70.093394, 70.092461, 70.091536, 70.090621, 70.089714, 70.088817, 70.087929, 70.087050, 70.086179, 70.085317, 70.084464, 70.083620, 70.082783, 70.081956, 70.081136, 70.080325, 70.079521, 70.078726, 70.077939, 70.077160, 70.076388, 70.075624, 70.074868, 70.074119, 70.073378, 70.072644, 70.071918, 70.071199, 70.070487, 70.069782, 70.069084, 70.068393, 70.067709, 70.067032, 70.066362, 70.065698, 70.065041 };
double UU[] = { -808.391749, -427.135143, 1794.994554, 920.280779, 1075.273081, 1168.853995, 1394.548759, 478.773480, 1977.432822, 987.228675, 1580.633611, 1864.301185, 1940.374073, 707.840166, 908.051176, 1168.576696, 1333.565602, 1831.359725, 1445.702961, 2438.562266, 1001.836307, 1467.214423, 1286.357278, 1167.833684, 1208.114000, 1857.909790, 2399.380194, 1527.520057, 927.380818, 2037.182433, 863.511995, 1633.681665, 1056.971556, 523.515525, 1723.401814, 1734.212943, 1248.567040, 847.546207, 1287.231252, 570.272094, 2332.495559, 1598.555899, 1700.378230, 1403.193687, 1692.663330, 1966.132034, 1853.681351, 1705.220473, 2332.139474, 1930.308872, 2753.166405, 2584.194850, 2499.965849, 2126.583636, 2743.253373, 2626.972434, 3088.895959, 2148.304959, 1937.371776, 1803.843287, 1816.703157, 1653.653791, 2047.270866, 2888.919337, 2037.291960, 1928.159913, 2591.204473, 2905.873932, 2075.640898, 2330.324537, 2328.110168, 2835.009814, 2543.046091, 3235.266791, 3012.314745, 1776.061634, 2926.008012, 2313.613491, 1918.304785, 2195.281552, 2807.562108, 2035.491274, 2151.734542, 2681.656687, 2248.291517, 3000.251808, 1714.987778, 2109.465521, 4055.496356, 3035.420677, 3356.436960, 3356.575880, 2755.429058, 2911.201443, 3249.484039, 3948.881979, 3058.784422, 3477.727154, 3396.747847, 3091.205560, 3827.181643, 3632.440879, 2340.470700, 3454.613072, 2822.084571, 3743.386872, 2258.881111, 3163.446789, 2758.284983, 4153.388847, 3660.687699, 3457.239278, 2163.850375, 2934.751430, 3062.987220, 2794.285160, 3304.889728, 2290.586818, 2900.424600, 3183.367610, 2931.746678, 3773.674658, 3648.658987, 3910.889490, 3494.874964, 3297.985005, 3907.225471, 4033.614785, 3443.927582, 3714.731772, 3820.907543, 3542.111139, 3065.745538, 2839.750757, 2889.365462, 3038.090533, 3683.713231, 3981.796898, 3338.110099, 4102.091661, 3923.925244, 4591.692276, 4608.000123, 3717.335644, 3902.527945, 3102.180805, 3155.595455, 3430.098108, 3500.457020, 4686.581918, 4736.522866, 4735.426999, 4375.947780, 3739.407656, 4144.101087, 4440.045863, 3732.801155, 4417.852033, 3736.497161, 4196.051227, 4179.548832, 4571.408798, 4166.744386, 3616.784853, 5202.251515, 5106.520640, 4336.500215, 4191.012165, 4196.575647, 4261.941754, 4784.712799, 4037.861829, 4022.567280, 5092.774428, 5039.041308, 4207.803377, 4333.350139, 3820.030001, 4681.455924, 4214.220782, 5182.627310, 4791.770895, 4423.709027, 4177.641562, 4351.748293, 5410.985531, 5232.389026, 5672.997363, 4489.014363, 4646.207697, 5513.725741, 5243.078415, 4683.101360, 5294.508799, 4889.771517, 5180.495105, 5006.227032, 4136.382613, 4675.968892, 4759.538916, 5251.517425, 5572.000101, 5183.895439, 5225.342695, 5245.403804, 4438.457736, 6177.995868, 5591.857662, 5953.684202, 5785.652251, 5077.685765, 5604.413610, 6016.583681, 4392.360697, 4223.675120, 4722.430542, 5204.394594, 5167.633648, 5321.095758, 6351.944332, 5641.742919, 5475.136056, 5758.858645, 4720.508477, 5127.198988, 6121.029701, 5029.852338, 5944.582827, 5149.471419, 5448.866107, 5616.326480, 5545.299132, 5395.894035, 6472.198655, 5991.971817, 5487.579997, 5717.317252, 6533.019736, 5454.321634, 5942.873739, 5769.586189, 6545.635233, 5636.061628, 6533.116483, 5603.885658, 6240.878193, 7017.433608, 5475.037967, 6813.273118, 5991.290400, 6514.930420, 6265.100068, 5591.815257, 5248.728651, 5694.423412, 5819.320964, 5709.863852, 6178.295977, 6037.626540, 6402.509820, 6721.702260, 6784.423595, 5777.463864, 6507.305263, 6625.558028, 5827.334422, 5693.890110, 6174.720765, 5975.038744, 6566.347967, 6354.643380, 6491.567369, 5811.886390, 6337.396795, 6588.526684, 7180.606778, 6780.072470, 7049.476486, 6518.957152, 6951.365611, 6967.801868, 7036.709485, 6359.811077, 6583.935788, 6217.435836, 6661.450984, 6326.508979, 6887.221091, 6734.948285, 7577.377005, 6314.098276, 7591.146569, 6775.748444, 6473.752923, 5875.503538, 6720.436125, 6251.416176, 8241.934851, 5516.949874, 7630.117183, 5196.446494, 5025.105000, 5081.106602, 5964.004981, 5215.878105, 5446.225715, 4603.786189, 4307.974253, 4213.655021, 5597.955201, 6085.444856, 4834.953321, 4992.890421, 6174.938285, 4577.174918, 5275.195268, 5019.180212, 4977.457009, 4550.793502, 4959.751142, 5637.966519, 4907.592319, 4581.363408, 5120.310224, 5620.680544, 5244.464238, 4245.011145, 4444.083742, 5138.031761, 5356.346163, 5995.816798, 5130.271250, 4537.106397, 4531.883190, 4473.292063, 5389.991349, 4866.548609, 3988.334670, 4874.734544, 5445.737875, 5192.584977, 3880.329262, 4784.193278, 5788.889476, 6621.243273, 4715.798279, 4966.480293, 5064.167035, 5381.847467, 4099.932575, 5186.845524, 4736.549176, 4957.819947, 4850.550843, 4012.951757, 5024.284022, 5517.354904, 5541.184379, 4481.235621, 4703.459827, 4893.659153, 4927.996775, 4931.524742, 4816.215831, 4928.087901, 4384.887230, 4951.756008, 5279.397221, 5043.178865, 5664.520983, 4837.246021, 5753.976118, 5517.258963, 5208.759380, 4965.579747, 4439.262817, 5666.749086, 3975.718220, 4967.562883, 5157.334460, 5087.445953, 5241.700026, 3958.245598, 5361.671299, 4928.225939, 4726.062145, 4675.312399, 6078.758279, 5740.051009, 5378.129143, 4136.250802, 4858.481192, 5303.714242, 5374.239928, 5217.864997, 5171.929564, 4832.743437, 5081.153242, 4050.626658, 4937.997377, 5069.588047, 4409.623372, 5832.514938, 4808.990078, 4634.645673, 4998.594251, 4768.036878, 5517.754943, 5240.285688, 6011.365373, 5050.040993, 4654.269922, 5220.461594, 5464.816421, 4967.550467, 5145.742864, 4835.230605, 4546.750574, 6076.607281, 5981.458017, 4992.164988, 5856.274190, 5043.720272, 4694.899823, 4025.769964, 3794.530833, 4962.555758, 4978.071570, 5121.247197, 5696.648985, 4835.929218, 5225.872520, 5042.472296, 4747.732227, 4612.318733, 5264.639063, 4213.948115, 5837.610010, 5174.937418, 5442.387817, 5387.766503, 4641.474753, 5165.819157, 5100.567779, 5463.896719, 5435.591661, 5052.889334, 6020.767241, 5725.250416, 5750.839977, 5410.651032, 4644.446916, 5433.677510, 4345.652100, 5055.485955, 4849.797889, 5351.730797, 5925.569234, 4622.784114, 5352.908746, 5019.062613, 4543.398917, 5218.072767, 5289.206574, 5318.524402, 4594.949243, 4705.756122, 4594.030751, 4517.324207, 4933.759755, 4880.728726, 4809.934423, 4456.451767, 4686.649717, 4799.437122, 5538.265432, 5265.684957, 4759.388938, 5103.482048, 5529.400779, 6090.971940, 5017.563758, 5324.258349, 5017.111110, 5222.347186, 4307.886689, 4952.596253, 5290.294171, 4615.001518, 5625.095947, 4385.521608, 5371.146136, 4315.295940, 4575.215428, 4681.396088, 4797.769950, 3971.674025, 4167.303727, 5082.530756, 4480.315164 };
double ZZ[] = { NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 22.127256, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 14.735154, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 27.682002, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 39.516015, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 28.847134, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 21.240553, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 33.767847, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 27.123182, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 38.181910, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 27.481835, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 45.136615, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 31.107731, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 34.115666, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 47.278962, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 34.307610, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 49.299423, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 55.145620, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 37.851878, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 58.435052, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 44.631667, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 67.858608, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 69.521151, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 52.964697, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 63.038940, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 72.095440, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 70.918874, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 67.155274, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 74.708538, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 75.877301, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 82.630868, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 70.373810, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 72.356667, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 59.356017, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 75.403988, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 68.936340, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 54.715367, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 67.054043, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 71.542513, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 61.819123, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 58.368590, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 78.084416, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 69.922438, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 67.850835, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 67.395611, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 73.107723, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 69.571203, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 73.282385, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 62.865790, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 84.796754, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN };
double XX_hat[] = { 0.000000, 0.157286, 0.535213, 0.821889, 1.121197, 1.426871, 1.752057, 1.982414, 2.360333, 2.635452, 22.090723, 22.256246, 22.427721, 22.474228, 22.540290, 22.631745, 22.738784, 22.894532, 23.010157, 23.223912, 19.445144, 19.597414, 19.730076, 19.849558, 19.971874, 20.157946, 20.396305, 20.545094, 20.632381, 20.829776, 22.730340, 22.866405, 22.943438, 22.966355, 23.109032, 23.251363, 23.343706, 23.395024, 23.489796, 23.511926, 26.564708, 26.658917, 26.762365, 26.835061, 26.935977, 27.063230, 27.177966, 27.276708, 27.437155, 27.555815, 27.896367, 28.075823, 28.245062, 28.375269, 28.565842, 28.742881, 28.964342, 29.089529, 29.192371, 29.280831, 28.591499, 28.670949, 28.788967, 28.989969, 29.103798, 29.205576, 29.372641, 29.569502, 29.681371, 29.817590, 30.230486, 30.411682, 30.561870, 30.779778, 30.973212, 31.041086, 31.223276, 31.342404, 31.420811, 31.526131, 31.432980, 31.522200, 31.622151, 31.774095, 31.881183, 32.062397, 32.113272, 32.203085, 32.486604, 32.665280, 33.110945, 33.315493, 33.457881, 33.614422, 33.803226, 34.060082, 34.225360, 34.430879, 34.626245, 34.789103, 34.755970, 34.971654, 35.055985, 35.250886, 35.380586, 35.601119, 35.670996, 35.830630, 35.948152, 36.204010, 36.657537, 36.836685, 36.884703, 37.009332, 37.145537, 37.253510, 37.411464, 37.466408, 37.581786, 37.724305, 37.684081, 37.884607, 38.070627, 38.281010, 38.447687, 38.593009, 38.797801, 39.013185, 39.167446, 39.347244, 39.433041, 39.592922, 39.703567, 39.790507, 39.881538, 39.986532, 40.155038, 40.351667, 40.481962, 40.687351, 40.973020, 41.222459, 41.471034, 41.628057, 41.802029, 41.894227, 41.990845, 42.113946, 42.242852, 42.489082, 42.628402, 42.875661, 43.084499, 43.227595, 43.409729, 43.619636, 43.756720, 43.960938, 44.094978, 44.273634, 44.501552, 44.713678, 44.883215, 44.996062, 45.266326, 45.524315, 45.702722, 45.864796, 46.025806, 46.191742, 46.488395, 46.627297, 46.763281, 47.004926, 47.238781, 47.387173, 47.546636, 47.653173, 47.844787, 47.987761, 48.145198, 48.342923, 48.501864, 48.634610, 48.783439, 49.036703, 49.269575, 49.544179, 49.697638, 49.865283, 50.173750, 50.396320, 50.560667, 50.784511, 50.965643, 51.174036, 51.362919, 51.462928, 51.615895, 51.775690, 51.940342, 52.178139, 52.374747, 52.573534, 52.772339, 52.888461, 53.177376, 53.404788, 53.666109, 53.908013, 54.146926, 54.365898, 54.623898, 54.716895, 54.792093, 54.916415, 55.087691, 55.253577, 55.433151, 55.714014, 55.982427, 56.170117, 56.384301, 56.492509, 56.640304, 56.886004, 57.020129, 57.244386, 57.386889, 57.557907, 57.724648, 57.901931, 58.062501, 58.329096, 58.545003, 58.708311, 58.892959, 59.157332, 59.311190, 59.512366, 59.706435, 59.963934, 60.127901, 60.379934, 60.536523, 60.755245, 61.049436, 61.186446, 61.455909, 61.640479, 61.909767, 62.117179, 62.255189, 62.357510, 62.503377, 62.660276, 62.804659, 62.994442, 63.168261, 63.376829, 63.637825, 63.879889, 64.018836, 64.229379, 64.449641, 64.587878, 64.711388, 64.881746, 65.030432, 65.236763, 65.424871, 65.619779, 65.744770, 65.921062, 66.120704, 66.377558, 66.591789, 66.830819, 67.014407, 67.239399, 67.483495, 67.712331, 67.871189, 68.050871, 68.192106, 68.376330, 68.525217, 68.728687, 68.914895, 69.183484, 69.339998, 69.605713, 69.787231, 69.936734, 70.024917, 70.196711, 70.319886, 70.640880, 70.686167, 70.942317, 70.981428, 70.974124, 70.972493, 71.059169, 71.070165, 71.104086, 71.053424, 70.973687, 70.885315, 70.936258, 71.033863, 71.007019, 70.996238, 71.103770, 71.050449, 71.067464, 71.058708, 71.045866, 70.990487, 70.976557, 71.033652, 71.014075, 70.962070, 70.964481, 71.016904, 71.031181, 70.945371, 70.880325, 70.885325, 70.912107, 70.976356, 70.979620, 70.923534, 70.867487, 70.806142, 70.837079, 70.815364, 70.706043, 70.686456, 70.724166, 70.746460, 70.627029, 70.599178, 70.672075, 70.827478, 70.790784, 70.779524, 70.778145, 70.808548, 70.710456, 70.718175, 70.684648, 70.673584, 70.651903, 70.546679, 70.543641, 70.589940, 70.638159, 70.579901, 70.544448, 70.494688, 70.482541, 70.470868, 70.447780, 70.436111, 70.370239, 70.361712, 70.386035, 70.386492, 70.449080, 70.421215, 70.492400, 70.539202, 70.554686, 70.545697, 70.484167, 70.546000, 70.438112, 70.430487, 70.441915, 70.448524, 70.468208, 70.359351, 70.391925, 70.380828, 70.349626, 70.313661, 70.418400, 70.488221, 70.521152, 70.411786, 70.393516, 70.419952, 70.453177, 70.470432, 70.482920, 70.461365, 70.464867, 70.365281, 70.355428, 70.334244, 70.271864, 70.352397, 70.329772, 70.289939, 70.286899, 70.260834, 70.310001, 70.330929, 70.428757, 70.445082, 70.406059, 70.424044, 70.466285, 70.458378, 70.468368, 70.447207, 70.397410, 70.501097, 70.594232, 70.586156, 70.665922, 70.663635, 70.626488, 70.522801, 70.397026, 70.389311, 70.383225, 70.391517, 70.457267, 70.431060, 70.449336, 70.449090, 70.419372, 70.376411, 70.399110, 70.316514, 70.397110, 70.410633, 70.450765, 70.478807, 70.438166, 70.450366, 70.455919, 70.497750, 70.536331, 70.536257, 70.632971, 70.699167, 70.767259, 70.805290, 70.761682, 70.797433, 70.724024, 70.722332, 70.700089, 70.728261, 70.813535, 70.767678, 70.795292, 70.786802, 70.733273, 70.747748, 70.769191, 70.793352, 70.744913, 70.708040, 70.660362, 70.605491, 70.592812, 70.580380, 70.555570, 70.495659, 70.459368, 70.434718, 70.484197, 70.505924, 70.476803, 70.482384, 70.530500, 70.618752, 70.614321, 70.640603, 70.635908, 70.651784, 70.576055, 70.565554, 70.588928, 70.544539, 70.601603, 70.562638, 70.594126, 70.519715, 70.472039, 70.435458, 70.410881, 70.303939, 70.217630, 70.223707, 70.169501 };
double P00[] = { 40000.000000, 39204.002500, 38423.845350, 37659.213328, 36909.797482, 36175.295012, 35455.409142, 34749.849000, 34058.329505, 33380.571248, 62.380830, 61.141951, 59.927727, 58.737665, 57.571285, 56.428117, 55.307697, 54.209574, 53.133304, 52.078451, 28.097216, 27.540581, 26.995024, 26.460323, 25.936262, 25.422631, 24.919220, 24.425828, 23.942254, 23.468303, 16.814887, 16.482771, 16.157264, 15.838234, 15.525553, 15.219095, 14.918735, 14.624352, 14.335828, 14.053045, 11.287880, 11.065751, 10.848042, 10.634666, 10.425537, 10.220568, 10.019679, 9.822787, 9.629814, 9.440681, 8.061521, 7.903597, 7.748815, 7.597114, 7.448431, 7.302707, 7.159884, 7.019902, 6.882706, 6.748240, 5.983064, 5.866501, 5.752257, 5.640287, 5.530546, 5.422988, 5.317570, 5.214251, 5.112987, 5.013739, 4.557923, 4.469721, 4.383273, 4.298546, 4.215505, 4.134116, 4.054348, 3.976166, 3.899540, 3.824440, 3.538477, 3.470562, 3.403997, 3.338758, 3.274817, 3.212148, 3.150726, 3.090527, 3.031525, 2.973698, 2.786948, 2.733988, 2.682081, 2.631208, 2.581347, 2.532478, 2.484582, 2.437638, 2.391629, 2.346536, 2.220541, 2.178852, 2.137993, 2.097947, 2.058698, 2.020230, 1.982527, 1.945575, 1.909358, 1.873862, 1.786504, 1.753452, 1.721059, 1.689310, 1.658192, 1.627694, 1.597803, 1.568507, 1.539794, 1.511652, 1.449648, 1.423300, 1.397476, 1.372166, 1.347360, 1.323048, 1.299219, 1.275865, 1.252975, 1.230541, 1.185627, 1.164533, 1.143858, 1.123596, 1.103736, 1.084272, 1.065195, 1.046497, 1.028172, 1.010211, 0.977090, 0.960146, 0.943539, 0.927263, 0.911310, 0.895675, 0.880351, 0.865332, 0.850612, 0.836185, 0.811373, 0.797727, 0.784352, 0.771244, 0.758396, 0.745804, 0.733462, 0.721366, 0.709511, 0.697892, 0.679045, 0.668032, 0.657238, 0.646659, 0.636291, 0.626129, 0.616169, 0.606407, 0.596839, 0.587462, 0.572970, 0.564068, 0.555343, 0.546792, 0.538411, 0.530197, 0.522146, 0.514255, 0.506521, 0.498941, 0.487677, 0.480473, 0.473411, 0.466490, 0.459707, 0.453059, 0.446543, 0.440157, 0.433898, 0.427763, 0.418924, 0.413087, 0.407367, 0.401760, 0.396265, 0.390879, 0.385601, 0.380428, 0.375357, 0.370387, 0.363391, 0.358660, 0.354023, 0.349478, 0.345023, 0.340657, 0.336378, 0.332184, 0.328074, 0.324045, 0.318465, 0.314628, 0.310867, 0.307181, 0.303568, 0.300027, 0.296556, 0.293155, 0.289821, 0.286553, 0.282072, 0.278959, 0.275908, 0.272917, 0.269986, 0.267113, 0.264298, 0.261538, 0.258834, 0.256183, 0.252560, 0.250034, 0.247559, 0.245132, 0.242754, 0.240423, 0.238139, 0.235900, 0.233705, 0.231555, 0.228607, 0.226558, 0.224550, 0.222581, 0.220652, 0.218761, 0.216907, 0.215091, 0.213311, 0.211566, 0.209153, 0.207491, 0.205862, 0.204265, 0.202701, 0.201167, 0.199664, 0.198190, 0.196746, 0.195331, 0.193344, 0.191996, 0.190676, 0.189381, 0.188113, 0.186869, 0.185650, 0.184456, 0.183285, 0.182138, 0.180491, 0.179399, 0.178329, 0.177280, 0.176252, 0.175245, 0.174257, 0.173290, 0.172341, 0.171412, 0.170037, 0.169153, 0.168287, 0.167438, 0.166606, 0.165790, 0.164991, 0.164208, 0.163440, 0.162688, 0.161532, 0.160817, 0.160117, 0.159431, 0.158758, 0.158099, 0.157452, 0.156819, 0.156198, 0.155590, 0.154610, 0.154034, 0.153468, 0.152914, 0.152371, 0.151839, 0.151318, 0.150806, 0.150305, 0.149814, 0.148977, 0.148512, 0.148057, 0.147611, 0.147173, 0.146744, 0.146324, 0.145912, 0.145509, 0.145113, 0.144391, 0.144018, 0.143652, 0.143293, 0.142941, 0.142597, 0.142259, 0.141928, 0.141604, 0.141286, 0.140657, 0.140358, 0.140065, 0.139778, 0.139496, 0.139220, 0.138950, 0.138685, 0.138425, 0.138170, 0.137617, 0.137378, 0.137144, 0.136915, 0.136691, 0.136470, 0.136255, 0.136043, 0.135836, 0.135633, 0.135141, 0.134952, 0.134766, 0.134584, 0.134406, 0.134231, 0.134060, 0.133892, 0.133728, 0.133567, 0.133125, 0.132975, 0.132829, 0.132686, 0.132545, 0.132408, 0.132273, 0.132141, 0.132011, 0.131884, 0.131482, 0.131366, 0.131252, 0.131140, 0.131030, 0.130923, 0.130817, 0.130714, 0.130613, 0.130514, 0.130145, 0.130055, 0.129967, 0.129880, 0.129796, 0.129713, 0.129632, 0.129552, 0.129474, 0.129397, 0.129055, 0.128987, 0.128920, 0.128855, 0.128791, 0.128728, 0.128666, 0.128605, 0.128546, 0.128488, 0.128168, 0.128117, 0.128068, 0.128019, 0.127972, 0.127925, 0.127879, 0.127834, 0.127791, 0.127748, 0.127445, 0.127409, 0.127373, 0.127339, 0.127305, 0.127271, 0.127239, 0.127206, 0.127175, 0.127144, 0.126856, 0.126832, 0.126808, 0.126784, 0.126761, 0.126739, 0.126717, 0.126695, 0.126674, 0.126653, 0.126376, 0.126362, 0.126347, 0.126333, 0.126319, 0.126305, 0.126291, 0.126278, 0.126265, 0.126253, 0.125986, 0.125979, 0.125972, 0.125965, 0.125958, 0.125952, 0.125945, 0.125939, 0.125933, 0.125927, 0.125667, 0.125667, 0.125666, 0.125665, 0.125664, 0.125664, 0.125663, 0.125662, 0.125662, 0.125661, 0.125408, 0.125412, 0.125417, 0.125421, 0.125425, 0.125429, 0.125433, 0.125437, 0.125441, 0.125445, 0.125197, 0.125205, 0.125214, 0.125222, 0.125230, 0.125238, 0.125246, 0.125254, 0.125261, 0.125268, 0.125025, 0.125037, 0.125049, 0.125060, 0.125071, 0.125083, 0.125093, 0.125104, 0.125114, 0.125125, 0.124885, 0.124899, 0.124914, 0.124928, 0.124942, 0.124956, 0.124969, 0.124982, 0.124995, 0.125008 };
double Fx[] = {};
double Fu[] = {};

void init_filter()
{
    R(0, 0) = 62.5;
    ekf.C[0] = 1;
    ekf.C[1] = 10000;
    ekf.C[2] = 100;
    ekf.C[3] = 20;
    ekf.X[0] = 0.0;
    ekf.P(0, 0) = 40000.0;
    ekf.Cov_U(0, 0) = 250000.0;
    ekf.setMeasurementFunction(h,1);
    ekf.initted = true;
}
// <DATA_END>


void test_ctor_dtor()
{
    ekf.setMeasurementFunction(h, 1);
    ekf.X[0] = EXTERNAL_TEMPERATURE; // initial temperature
    ekf.P.fill(0); // initial covariance
    ekf.Cov_U.fill(PROCESS_NOISE*PROCESS_NOISE);
    R.fill(MEASURE_NOISE*MEASURE_NOISE);
    ekf.C[0] = TIME_STEP;
    ekf.C[1] = THERMAL_INERTIA;
    ekf.C[2] = THERMAL_LOSSES;
    ekf.C[3] = EXTERNAL_TEMPERATURE;

    TEST_ASSERT_EQUAL(1, ekf.z_dim[0]);
    TEST_ASSERT_EQUAL(1, ekf.X.size());
    TEST_ASSERT_EQUAL(1, ekf.U.size());
    TEST_ASSERT_EQUAL(4, ekf.C.size());

    //check if everything is initialized correctly
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE, ekf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0, ekf.P(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, PROCESS_NOISE*PROCESS_NOISE, ekf.Cov_U[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, MEASURE_NOISE*MEASURE_NOISE, R(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, TIME_STEP, ekf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_INERTIA, ekf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_LOSSES, ekf.C[2]);
}

void test_predict()
{
    ekf.U[0] = 10; // heating power
    ekf.predict(); // first prediction is considered with step time 0, if you don't want that, you can set ekf.initted to true before calling predict
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE, ekf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, PROCESS_NOISE*PROCESS_NOISE, ekf.Cov_U[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, MEASURE_NOISE*MEASURE_NOISE, R(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0, ekf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_INERTIA, ekf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_LOSSES, ekf.C[2]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE, ekf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0, ekf.P(0, 0));

    ekf.C[0] = TIME_STEP;
    ekf.predict();
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE + 10*TIME_STEP/THERMAL_INERTIA, ekf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, PROCESS_NOISE*PROCESS_NOISE, ekf.Cov_U[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, MEASURE_NOISE*MEASURE_NOISE, R(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, TIME_STEP, ekf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_INERTIA, ekf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_LOSSES, ekf.C[2]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE, ekf.C[3]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0.0025, ekf.P(0, 0));

}

void test_update()
{
    ekf.X[0] = EXTERNAL_TEMPERATURE; // reset temperature
    ekf.P.fill(1); // initial covariance
    R.fill(MEASURE_NOISE*MEASURE_NOISE);
    ekf.C[1] = THERMAL_INERTIA;
    ekf.C[2] = THERMAL_LOSSES;
    ekf.C[3] = EXTERNAL_TEMPERATURE;
    Z[0] = EXTERNAL_TEMPERATURE + 5; // measurement
    ekf.update(Z, R);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 20.19231, ekf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0.9615384, ekf.P(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, PROCESS_NOISE*PROCESS_NOISE, ekf.Cov_U[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, MEASURE_NOISE*MEASURE_NOISE, R(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, TIME_STEP, ekf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_INERTIA, ekf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_LOSSES, ekf.C[2]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE, ekf.C[3]);
}

// #include <iostream>
void test_DATA()
{
    init_filter();
    ekf.setMeasurementFunction(h, 1);
    ekf.initted = true;
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 1.0, ekf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 10000.0, ekf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 100.0, ekf.C[2]);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 20.0, ekf.C[3]);

    for (int i = 1; i < sizeof(ZZ)/sizeof(ZZ[0]); i++)
    {
        ekf.U[0] = UU[i];
        ekf.predict();
        if (!isnan(ZZ[i]))
        {
            Z[0] = ZZ[i];
            ekf.update(Z, R);
        }
        TEST_ASSERT_TRUE(fabs((Fx[i] - ekf.Fx_val_T(0, 0))/Fx[i]) < 1e-5);
        TEST_ASSERT_TRUE(fabs((Fu[i] - ekf.Fu_val_T(0, 0))/Fu[i]) < 1e-5);
        TEST_ASSERT_TRUE(fabs((XX_hat[i] - ekf.X[0])/XX_hat[i]) < 1e-5);
        TEST_ASSERT_TRUE(fabs((sqrt(P00[i]) - sqrt(ekf.P(0, 0)))/sqrt(P00[i])) < 1e-5);
    }
}

void setUp() {
    // Initialisation avant chaque test (laisser vide si inutile)
}

void tearDown() {
    // Nettoyage après chaque test (laisser vide si inutile)
}


void setup() {
    #ifndef NATIVE
    delay(2000); // Permet d'attendre que la liaison série soit établie
    #endif
    UNITY_BEGIN();
    RUN_TEST(test_ctor_dtor);
    RUN_TEST(test_predict);
    RUN_TEST(test_update);
    RUN_TEST(test_DATA);
    UNITY_END();
}

void loop() {
}

#ifdef NATIVE
int main(int argc, char **argv) {
    setup();
}
#endif

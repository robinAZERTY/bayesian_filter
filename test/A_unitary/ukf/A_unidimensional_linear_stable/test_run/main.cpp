/*
to run all the test use the following command
pio test -e native
*/


/*
To test the basic functionalities of the ukf, here is an example of a simple one-dimensional problem.
Temperature estimation in a controlled environment (such as an oven with a heating element).
The scenario is as follows:
You have an oven, and you want to precisely control its temperature using a heating element.
Let's assume you only have a temperature sensor that is highly imprecise, with significant noise and a low sampling rate.
You also have a physical model of the oven, allowing you to predict the temperature based on the heating power.

The constants characterizing the oven are as follows:
- Thermal inertia: the oven heats up and cools down slowly.
- Thermal losses: the temperature inside the oven tends to equalize naturally with the external temperature.
- External temperature: the external temperature is a known value.

x: oven temperature
u: heating power
c: oven parameters (time step, thermal inertia, thermal losses, external temperature)

The oven temperature evolves according to the following formula:
f(x, u, c) = x + u * c0 / c1 - c0 * (x - c3) / c2

The measurement function is simply the temperature measured by the sensor:
h(x, c) = x

Note: An Extended Kalman Filter (ukf) may not be the ideal solution for this problem since it is linear,
but it should be a good way to check that the ukf is functioning correctly for simple problems.
*/


#include <unity.h>
#include <ukf.hpp>

#ifdef NATIVE
#define NAN std::nan("")
#endif

#define TIME_STEP 10
#define THERMAL_INERTIA 100
#define THERMAL_LOSSES 2
#define EXTERNAL_TEMPERATURE 20

#define MEASURE_NOISE 5
#define PROCESS_NOISE 0.5

// Note : In ukf, c[0] is always the time step, c[1:] are the remaining parameters

template <typename T>
internal::tmp<Vector<T>> && f(const Vector<T> &x, const Vector<T> &u, const Vector<T> &c)
{
    auto *ret = internal::tmp<Vector<T>>::get(x.size()); // ask for a temporary variable of the same size as x
    (*ret)[0] = x[0] + c[0] *(u[0]/c[1] - (x[0]-c[3])/c[2]); // compute the new temperature
    return internal::move(*ret); // return the temporary variable
}

// simple measurement function
template <typename T>
internal::tmp<Vector<T>> && h(const Vector<T> &x, const Vector<T> &c)
{
    auto *ret = internal::tmp<Vector<T>>::get(1); // ask for a temporary variable of size 2
    (*ret)[0] = x[0];
    return internal::move(*ret);
}

Ukf<1, 1, 4, 1, double> ukf(f); // 1 state, 1 command, 4 parameters

Vector<double> Z(1); // measurement
symMatrix<double> R(1, 1); // measurement noise

// <DATA_START>
float Time[] = { 0.000000, 1.000000, 2.000000, 3.000000, 4.000000, 5.000000, 6.000000, 7.000000, 8.000000, 9.000000, 10.000000, 11.000000, 12.000000, 13.000000, 14.000000, 15.000000, 16.000000, 17.000000, 18.000000, 19.000000, 20.000000, 21.000000, 22.000000, 23.000000, 24.000000, 25.000000, 26.000000, 27.000000, 28.000000, 29.000000, 30.000000, 31.000000, 32.000000, 33.000000, 34.000000, 35.000000, 36.000000, 37.000000, 38.000000, 39.000000, 40.000000, 41.000000, 42.000000, 43.000000, 44.000000, 45.000000, 46.000000, 47.000000, 48.000000, 49.000000, 50.000000, 51.000000, 52.000000, 53.000000, 54.000000, 55.000000, 56.000000, 57.000000, 58.000000, 59.000000, 60.000000, 61.000000, 62.000000, 63.000000, 64.000000, 65.000000, 66.000000, 67.000000, 68.000000, 69.000000, 70.000000, 71.000000, 72.000000, 73.000000, 74.000000, 75.000000, 76.000000, 77.000000, 78.000000, 79.000000, 80.000000, 81.000000, 82.000000, 83.000000, 84.000000, 85.000000, 86.000000, 87.000000, 88.000000, 89.000000, 90.000000, 91.000000, 92.000000, 93.000000, 94.000000, 95.000000, 96.000000, 97.000000, 98.000000, 99.000000, 100.000000, 101.000000, 102.000000, 103.000000, 104.000000, 105.000000, 106.000000, 107.000000, 108.000000, 109.000000, 110.000000, 111.000000, 112.000000, 113.000000, 114.000000, 115.000000, 116.000000, 117.000000, 118.000000, 119.000000, 120.000000, 121.000000, 122.000000, 123.000000, 124.000000, 125.000000, 126.000000, 127.000000, 128.000000, 129.000000, 130.000000, 131.000000, 132.000000, 133.000000, 134.000000, 135.000000, 136.000000, 137.000000, 138.000000, 139.000000, 140.000000, 141.000000, 142.000000, 143.000000, 144.000000, 145.000000, 146.000000, 147.000000, 148.000000, 149.000000, 150.000000, 151.000000, 152.000000, 153.000000, 154.000000, 155.000000, 156.000000, 157.000000, 158.000000, 159.000000, 160.000000, 161.000000, 162.000000, 163.000000, 164.000000, 165.000000, 166.000000, 167.000000, 168.000000, 169.000000, 170.000000, 171.000000, 172.000000, 173.000000, 174.000000, 175.000000, 176.000000, 177.000000, 178.000000, 179.000000, 180.000000, 181.000000, 182.000000, 183.000000, 184.000000, 185.000000, 186.000000, 187.000000, 188.000000, 189.000000, 190.000000, 191.000000, 192.000000, 193.000000, 194.000000, 195.000000, 196.000000, 197.000000, 198.000000, 199.000000, 200.000000, 201.000000, 202.000000, 203.000000, 204.000000, 205.000000, 206.000000, 207.000000, 208.000000, 209.000000, 210.000000, 211.000000, 212.000000, 213.000000, 214.000000, 215.000000, 216.000000, 217.000000, 218.000000, 219.000000, 220.000000, 221.000000, 222.000000, 223.000000, 224.000000, 225.000000, 226.000000, 227.000000, 228.000000, 229.000000, 230.000000, 231.000000, 232.000000, 233.000000, 234.000000, 235.000000, 236.000000, 237.000000, 238.000000, 239.000000, 240.000000, 241.000000, 242.000000, 243.000000, 244.000000, 245.000000, 246.000000, 247.000000, 248.000000, 249.000000, 250.000000, 251.000000, 252.000000, 253.000000, 254.000000, 255.000000, 256.000000, 257.000000, 258.000000, 259.000000, 260.000000, 261.000000, 262.000000, 263.000000, 264.000000, 265.000000, 266.000000, 267.000000, 268.000000, 269.000000, 270.000000, 271.000000, 272.000000, 273.000000, 274.000000, 275.000000, 276.000000, 277.000000, 278.000000, 279.000000, 280.000000, 281.000000, 282.000000, 283.000000, 284.000000, 285.000000, 286.000000, 287.000000, 288.000000, 289.000000, 290.000000, 291.000000, 292.000000, 293.000000, 294.000000, 295.000000, 296.000000, 297.000000, 298.000000, 299.000000, 300.000000, 301.000000, 302.000000, 303.000000, 304.000000, 305.000000, 306.000000, 307.000000, 308.000000, 309.000000, 310.000000, 311.000000, 312.000000, 313.000000, 314.000000, 315.000000, 316.000000, 317.000000, 318.000000, 319.000000, 320.000000, 321.000000, 322.000000, 323.000000, 324.000000, 325.000000, 326.000000, 327.000000, 328.000000, 329.000000, 330.000000, 331.000000, 332.000000, 333.000000, 334.000000, 335.000000, 336.000000, 337.000000, 338.000000, 339.000000, 340.000000, 341.000000, 342.000000, 343.000000, 344.000000, 345.000000, 346.000000, 347.000000, 348.000000, 349.000000, 350.000000, 351.000000, 352.000000, 353.000000, 354.000000, 355.000000, 356.000000, 357.000000, 358.000000, 359.000000, 360.000000, 361.000000, 362.000000, 363.000000, 364.000000, 365.000000, 366.000000, 367.000000, 368.000000, 369.000000, 370.000000, 371.000000, 372.000000, 373.000000, 374.000000, 375.000000, 376.000000, 377.000000, 378.000000, 379.000000, 380.000000, 381.000000, 382.000000, 383.000000, 384.000000, 385.000000, 386.000000, 387.000000, 388.000000, 389.000000, 390.000000, 391.000000, 392.000000, 393.000000, 394.000000, 395.000000, 396.000000, 397.000000, 398.000000, 399.000000, 400.000000, 401.000000, 402.000000, 403.000000, 404.000000, 405.000000, 406.000000, 407.000000, 408.000000, 409.000000, 410.000000, 411.000000, 412.000000, 413.000000, 414.000000, 415.000000, 416.000000, 417.000000, 418.000000, 419.000000, 420.000000, 421.000000, 422.000000, 423.000000, 424.000000, 425.000000, 426.000000, 427.000000, 428.000000, 429.000000, 430.000000, 431.000000, 432.000000, 433.000000, 434.000000, 435.000000, 436.000000, 437.000000, 438.000000, 439.000000, 440.000000, 441.000000, 442.000000, 443.000000, 444.000000, 445.000000, 446.000000, 447.000000, 448.000000, 449.000000, 450.000000, 451.000000, 452.000000, 453.000000, 454.000000, 455.000000, 456.000000, 457.000000, 458.000000, 459.000000, 460.000000, 461.000000, 462.000000, 463.000000, 464.000000, 465.000000, 466.000000, 467.000000, 468.000000, 469.000000, 470.000000, 471.000000, 472.000000, 473.000000, 474.000000, 475.000000, 476.000000, 477.000000, 478.000000, 479.000000, 480.000000, 481.000000, 482.000000, 483.000000, 484.000000, 485.000000, 486.000000, 487.000000, 488.000000, 489.000000, 490.000000, 491.000000, 492.000000, 493.000000, 494.000000, 495.000000, 496.000000, 497.000000, 498.000000, 499.000000 };
float XX[] = { 20.000000, 20.102000, 20.204980, 20.308930, 20.413841, 20.519702, 20.626505, 20.734240, 20.842898, 20.952469, 21.062944, 21.174315, 21.286572, 21.399706, 21.513709, 21.628572, 21.744286, 21.860843, 21.978235, 22.096453, 22.215488, 22.335333, 22.455980, 22.577420, 22.699646, 22.822649, 22.946423, 23.070959, 23.196249, 23.322287, 23.449064, 23.576573, 23.704807, 23.833759, 23.963422, 24.093787, 24.224850, 24.356601, 24.489035, 24.622145, 24.755923, 24.890364, 25.025460, 25.161206, 25.297594, 25.434618, 25.572272, 25.710549, 25.849443, 25.988949, 26.129059, 26.269769, 26.411071, 26.552960, 26.695431, 26.838477, 26.982092, 27.126271, 27.271008, 27.416298, 27.562135, 27.708514, 27.855429, 28.002874, 28.150846, 28.299337, 28.448344, 28.597860, 28.747882, 28.898403, 29.049419, 29.200925, 29.352915, 29.505386, 29.658332, 29.811749, 29.965632, 30.119975, 30.274776, 30.430028, 30.585727, 30.741870, 30.898452, 31.055467, 31.212912, 31.370783, 31.529075, 31.687785, 31.846907, 32.006438, 32.166373, 32.326710, 32.487443, 32.648568, 32.810082, 32.971982, 33.134262, 33.296919, 33.459950, 33.623350, 33.787117, 33.951246, 34.115733, 34.280576, 34.445770, 34.611313, 34.777199, 34.943427, 35.109993, 35.276893, 35.444124, 35.611683, 35.779566, 35.947771, 36.116293, 36.285130, 36.454279, 36.623736, 36.793498, 36.963563, 37.133928, 37.304589, 37.475543, 37.646787, 37.818319, 37.990136, 38.162235, 38.334612, 38.507266, 38.680194, 38.853392, 39.026858, 39.200589, 39.374583, 39.548838, 39.723349, 39.898116, 40.073134, 40.248403, 40.423919, 40.599680, 40.775683, 40.951926, 41.128407, 41.305123, 41.482072, 41.659251, 41.836659, 42.014292, 42.192149, 42.370228, 42.548525, 42.727040, 42.905770, 43.084712, 43.263865, 43.443226, 43.622794, 43.802566, 43.982540, 44.162715, 44.343088, 44.523657, 44.704420, 44.885376, 45.066522, 45.247857, 45.429379, 45.611085, 45.792974, 45.975044, 46.157294, 46.339721, 46.522324, 46.705100, 46.888049, 47.071169, 47.254457, 47.437913, 47.621533, 47.805318, 47.989265, 48.173372, 48.357639, 48.542062, 48.726642, 48.911375, 49.096261, 49.281299, 49.466486, 49.651821, 49.837303, 50.022930, 50.208700, 50.394613, 50.580667, 50.766861, 50.953192, 51.139660, 51.326263, 51.513001, 51.699871, 51.886872, 52.074003, 52.261263, 52.448651, 52.636164, 52.823803, 53.011565, 53.199449, 53.387454, 53.575580, 53.763824, 53.952186, 54.140664, 54.329257, 54.517965, 54.706785, 54.895717, 55.084760, 55.273912, 55.463173, 55.652542, 55.842016, 56.031596, 56.221280, 56.411067, 56.600957, 56.790947, 56.981038, 57.171227, 57.361515, 57.551900, 57.742381, 57.932957, 58.123627, 58.314391, 58.505247, 58.696195, 58.887233, 59.078360, 59.269577, 59.460881, 59.652272, 59.843750, 60.035312, 60.226959, 60.418689, 60.610502, 60.802397, 60.994373, 61.186430, 61.378565, 61.570780, 61.763072, 61.955441, 62.147887, 62.340408, 62.533004, 62.725674, 62.918417, 63.111233, 63.304121, 63.497079, 63.690109, 63.883208, 64.076375, 64.269612, 64.462916, 64.656286, 64.849724, 65.043226, 65.236794, 65.430426, 65.624122, 65.817881, 66.011702, 66.205585, 66.399529, 66.593534, 66.787598, 66.981722, 67.175905, 67.370146, 67.564445, 67.758800, 67.953212, 68.147680, 68.342203, 68.536781, 68.731413, 68.926099, 69.120838, 69.315630, 69.510474, 69.705369, 69.900315, 70.095312, 70.290359, 70.485455, 70.480601, 70.475795, 70.471037, 70.466326, 70.461663, 70.457047, 70.452476, 70.447951, 70.443472, 70.439037, 70.434647, 70.430300, 70.425997, 70.421737, 70.417520, 70.413345, 70.409211, 70.405119, 70.401068, 70.397057, 70.393087, 70.389156, 70.385264, 70.381412, 70.377598, 70.373822, 70.370083, 70.366382, 70.362719, 70.359091, 70.355501, 70.351946, 70.348426, 70.344942, 70.341492, 70.338077, 70.334697, 70.331350, 70.328036, 70.324756, 70.321508, 70.318293, 70.315110, 70.311959, 70.308840, 70.305751, 70.302694, 70.299667, 70.296670, 70.293703, 70.290766, 70.287859, 70.284980, 70.282130, 70.279309, 70.276516, 70.273751, 70.271013, 70.268303, 70.265620, 70.262964, 70.260334, 70.257731, 70.255154, 70.252602, 70.250076, 70.247575, 70.245100, 70.242649, 70.240222, 70.237820, 70.235442, 70.233087, 70.230756, 70.228449, 70.226164, 70.223903, 70.221664, 70.219447, 70.217253, 70.215080, 70.212929, 70.210800, 70.208692, 70.206605, 70.204539, 70.202494, 70.200469, 70.198464, 70.196479, 70.194514, 70.192569, 70.190644, 70.188737, 70.186850, 70.184981, 70.183132, 70.181300, 70.179487, 70.177692, 70.175915, 70.174156, 70.172415, 70.170691, 70.168984, 70.167294, 70.165621, 70.163965, 70.162325, 70.160702, 70.159095, 70.157504, 70.155929, 70.154369, 70.152826, 70.151298, 70.149785, 70.148287, 70.146804, 70.145336, 70.143882, 70.142444, 70.141019, 70.139609, 70.138213, 70.136831, 70.135462, 70.134108, 70.132767, 70.131439, 70.130125, 70.128823, 70.127535, 70.126260, 70.124997, 70.123747, 70.122510, 70.121285, 70.120072, 70.118871, 70.117682, 70.116506, 70.115341, 70.114187, 70.113045, 70.111915, 70.110796, 70.109688, 70.108591, 70.107505, 70.106430, 70.105366, 70.104312, 70.103269, 70.102236, 70.101214, 70.100202, 70.099200, 70.098208, 70.097226, 70.096253, 70.095291, 70.094338, 70.093394, 70.092461, 70.091536, 70.090621, 70.089714, 70.088817, 70.087929, 70.087050, 70.086179, 70.085317, 70.084464, 70.083620, 70.082783, 70.081956, 70.081136, 70.080325, 70.079521, 70.078726, 70.077939, 70.077160, 70.076388, 70.075624, 70.074868, 70.074119, 70.073378, 70.072644, 70.071918, 70.071199, 70.070487, 70.069782, 70.069084, 70.068393, 70.067709, 70.067032, 70.066362, 70.065698, 70.065041 };
float UU[] = { 487.910484, 1545.411537, 1222.901861, 1659.330855, 828.597162, 591.349096, 38.083454, 1769.320487, 2069.925265, 1893.744781, 1623.870414, 1146.498300, 711.984964, 651.796346, 1208.119728, 1282.990988, 2158.229965, 1045.647607, 1729.478069, 2121.428882, 1880.022230, 1362.464561, 1880.643642, 1601.373872, 1133.145960, 351.331026, 1650.301276, 1613.272508, 2215.181642, 1766.728891, 1810.560163, 2002.901323, 1791.187411, 1511.427961, 1517.626753, 1735.941170, 1988.339448, 754.593372, 1718.326385, 2107.545390, 1139.573062, 1007.139785, 1927.405030, 1549.158278, 3067.340374, 1121.189252, 2494.141081, 1779.504470, 1468.656434, 1299.449482, 1483.967237, 2854.387799, 1900.707854, 1762.787996, 1848.836064, 2269.191732, 3042.965535, 2535.514558, 2139.052603, 2598.042332, 1516.918538, 3123.295909, 2042.271566, 1490.352090, 2937.811144, 1619.540231, 2534.379634, 2228.363864, 2159.457699, 2396.601255, 1755.242159, 2136.831523, 2127.566386, 2212.100192, 2020.868206, 2349.397565, 1495.932464, 2739.530721, 2568.579129, 2937.459826, 1909.899927, 3065.296852, 2275.270650, 2925.396750, 3478.473660, 3574.358353, 3229.145453, 2154.266909, 3224.076337, 3096.522172, 3356.753443, 3790.781468, 2837.806016, 2712.373474, 2578.612018, 2843.790207, 3583.002806, 2970.887859, 3374.498005, 2086.720054, 3225.978828, 2705.030781, 2721.603767, 2285.872373, 3206.368561, 3874.611046, 2718.928071, 3090.662133, 3891.544538, 2631.873828, 3415.364310, 3559.994101, 3467.826759, 3285.497574, 3283.951462, 3013.805286, 2174.419447, 3320.540954, 3382.592340, 3801.684073, 3236.422049, 2901.278456, 2649.184209, 4042.461480, 3236.756376, 3635.635619, 3516.259534, 3392.763712, 3640.973809, 3835.134078, 2992.089533, 3402.725490, 4434.851285, 3753.744098, 3759.460983, 3838.000915, 3728.443738, 4108.143205, 3645.678077, 3673.705415, 3547.115737, 3803.956635, 3444.460805, 4787.744011, 4681.100938, 3824.469161, 4087.437755, 3717.603269, 3547.353783, 3273.814442, 3911.561449, 3281.549100, 4633.172407, 4471.024687, 3942.861703, 5187.101120, 3627.827127, 4172.799556, 4061.955424, 3125.153133, 4188.580248, 4155.638476, 3766.547590, 4277.372483, 5366.114663, 3623.313895, 4266.630405, 4996.318176, 4675.576511, 4752.909556, 4885.279057, 4166.268475, 5077.567986, 5238.025687, 4955.707057, 5466.230140, 4311.666304, 5303.747513, 4995.941714, 5802.083385, 4678.435233, 4216.591555, 4444.714275, 4870.568202, 3937.213583, 5068.918049, 5054.790637, 3952.127149, 4929.699899, 5307.384583, 4772.161237, 3710.305870, 4128.553830, 4594.265155, 5629.274653, 4645.066453, 5070.027374, 5884.684404, 5147.241392, 5847.501125, 4813.343241, 5533.570268, 5144.224159, 5743.579846, 5306.385188, 4392.190843, 4903.312759, 5799.018876, 4641.669899, 5467.577781, 5545.722267, 4511.272298, 4644.748295, 5006.858458, 4480.652170, 5088.160135, 5976.561648, 4905.839921, 4991.458521, 5232.479926, 5158.486281, 5210.091707, 4722.958718, 5453.562853, 6141.565903, 4892.626858, 4669.484142, 5240.009139, 6171.470141, 5875.791084, 5559.213641, 5151.922500, 5657.949756, 5328.221369, 6362.427165, 5670.219005, 5482.838607, 6052.225135, 5681.159908, 5798.935307, 5755.249576, 5956.248136, 6241.688418, 5792.784400, 5707.366780, 5904.314307, 6196.760052, 4601.539481, 5580.749152, 5976.084013, 6752.549436, 6246.052045, 6584.333558, 6540.132537, 6321.250639, 6364.215249, 6938.330048, 5929.496503, 6145.309702, 6964.942435, 6323.184072, 6565.320699, 5584.324548, 5793.992458, 6305.243537, 6396.711719, 5962.600144, 6055.993502, 7106.221343, 5932.240227, 6000.360061, 6880.554536, 6663.789180, 6107.563071, 5515.512006, 6809.330043, 5857.967776, 6574.559984, 6546.142538, 6554.576008, 6935.690962, 5632.134854, 6945.862952, 6646.462034, 6452.602898, 6548.976457, 6301.283505, 6276.812443, 7029.639118, 6971.357517, 7642.098950, 6694.155227, 7500.286720, 7007.219496, 7196.681826, 7486.137619, 5899.959383, 6335.872807, 8055.814760, 7078.763313, 5185.024805, 5785.327309, 4732.785890, 6227.305608, 5725.818662, 4790.520336, 6053.833473, 4443.200399, 5268.286265, 4955.282387, 4813.644388, 5200.440501, 4366.792442, 4385.436212, 5370.907252, 5259.751920, 4206.113267, 5049.481551, 5479.913845, 4899.749735, 5534.989075, 4493.389443, 5093.989053, 4173.245755, 5176.507031, 5025.232525, 5428.053307, 5634.300319, 4411.258800, 4735.472170, 5378.525053, 4662.900384, 5075.232310, 4946.861928, 5259.753619, 5644.680720, 5298.767995, 4931.829875, 5175.102272, 5028.450976, 4402.604358, 4555.310616, 5246.184771, 5059.099859, 4714.294976, 4992.591549, 5665.913039, 5208.537674, 5414.171757, 4473.717827, 6253.165256, 5830.740788, 5114.291254, 4219.868082, 4802.369498, 5210.746806, 4607.182696, 5204.270303, 4352.874097, 4492.472385, 5735.577215, 4533.381314, 5245.071154, 5244.162968, 4455.258445, 4438.347201, 4771.978083, 4966.543016, 4709.595324, 4570.180881, 4340.831950, 5218.900395, 5705.588240, 4976.785965, 4505.412385, 4838.702713, 5403.144862, 5761.352459, 4932.676032, 5237.404529, 4259.736881, 4678.997117, 5056.309517, 5081.102608, 4984.949344, 5595.761268, 5479.207000, 4773.112883, 5495.177228, 5286.748678, 4065.983765, 5520.176800, 5194.458043, 5549.079519, 4729.786272, 4622.818914, 5515.838998, 5168.431581, 4735.214349, 5246.930931, 4801.689430, 5856.604615, 4742.651565, 4808.561352, 4479.334269, 5472.004806, 5150.413750, 5306.783274, 5383.724009, 5155.657275, 4458.837596, 3304.255886, 5232.938310, 5363.934959, 4577.735804, 4407.267105, 4870.957010, 4866.514947, 4400.411870, 4389.074645, 4183.500929, 5537.164461, 4544.694290, 5329.038874, 4538.709144, 4642.394589, 5611.607981, 5236.617915, 5518.284739, 5017.293512, 4365.148328, 4869.671093, 5190.292257, 5626.883649, 5472.657867, 3722.985028, 5281.113546, 5129.344663, 4741.076986, 4403.517352, 5578.719822, 5840.326870, 5298.968095, 4947.941455, 5112.686945, 5580.374095, 5324.913312, 5552.396636, 5410.697263, 5562.455151, 5086.893564, 5017.565838, 5088.776953, 4690.087632, 4642.513250, 4946.047463, 5304.317735, 4250.973671, 5116.811771, 5416.056705, 5432.612562, 5347.755213, 4587.576575, 5498.417489, 5597.802850, 4787.895564, 5812.645602, 4241.110326, 4799.483282, 4329.309006, 5186.049352, 6147.038904, 4886.241349, 5489.774455, 4584.514934, 4304.746764, 4674.367082, 5054.376437, 5733.152584, 4541.442622, 4345.181139, 4949.421846, 4368.845576, 5061.024034, 4203.522985, 4770.090612, 5226.142901, 5058.147948, 4383.858459, 4912.522748, 6033.164742, 5231.386806, 4936.992768, 5011.655512, 5212.366321, 4834.493287, 4635.532005, 4164.400831, 5751.394168, 4365.085927 };
float ZZ[] = { NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 21.404967, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 14.461631, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 16.936661, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 16.829411, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 19.115085, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 31.467170, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 40.077223, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 35.526790, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 30.696870, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 26.292533, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 38.353282, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 31.280734, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 44.167823, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 38.875452, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 42.202557, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 36.952927, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 47.918502, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 67.053489, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 49.135826, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 64.269341, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 57.517450, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 58.841558, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 60.229180, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 65.315596, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 58.035996, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 48.561729, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 67.218468, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 76.345192, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 75.704644, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 64.017365, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 62.922323, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 72.690804, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 67.252199, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 70.223897, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 78.464392, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 83.906793, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 74.162074, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 76.881945, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 49.936031, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 68.647982, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 72.002412, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 71.723223, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 73.847673, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 65.029033, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 67.792696, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 72.918718, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 83.321525, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 60.968297, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 68.369129, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN };
float XX_hat[] = { 0.000000, 0.354541, 0.673286, 1.032486, 1.305021, 1.551106, 1.739403, 2.098941, 2.484944, 2.849469, 21.370223, 21.471171, 21.527657, 21.577560, 21.682597, 21.794070, 21.991952, 22.076597, 22.228779, 22.418634, 18.931701, 19.078630, 19.275908, 19.443287, 19.562168, 19.601680, 19.770693, 19.934313, 20.156488, 20.331596, 19.548159, 19.752968, 19.934557, 20.086354, 20.237253, 20.408475, 20.603224, 20.672651, 20.837757, 21.040134, 20.364521, 20.461590, 20.649715, 20.798133, 21.096886, 21.198036, 21.435470, 21.599066, 21.729941, 21.842586, 21.604002, 21.873401, 22.044738, 22.200569, 22.363447, 22.566732, 22.845361, 23.070459, 23.253660, 23.480927, 24.351086, 24.619904, 24.777933, 24.879188, 25.124178, 25.234890, 25.435979, 25.604456, 25.764357, 25.946373, 27.084380, 27.227219, 27.367704, 27.515237, 27.642171, 27.800689, 27.872276, 28.067506, 28.243689, 28.454998, 28.955724, 29.172697, 29.308497, 29.507952, 29.760719, 30.020548, 30.243257, 30.356251, 30.575096, 30.778998, 30.993062, 31.262210, 31.433368, 31.590272, 31.732230, 31.899287, 32.138595, 32.314297, 32.528604, 32.611990, 32.577037, 32.721770, 32.866712, 32.966633, 33.157603, 33.413488, 33.551246, 33.724800, 33.976706, 34.100127, 34.416454, 34.628289, 34.828789, 35.009050, 35.187355, 35.336862, 35.400935, 35.578980, 35.761450, 35.984003, 36.034979, 36.164757, 36.268028, 36.509594, 36.668174, 36.865055, 37.048031, 37.216827, 37.408756, 37.618182, 37.863035, 38.024677, 38.287915, 38.480411, 38.671553, 38.868637, 39.052795, 39.273082, 39.444919, 39.617840, 39.762301, 39.945074, 40.090069, 40.367943, 40.632374, 40.808497, 41.009156, 41.170825, 41.313852, 41.428095, 41.612719, 41.724747, 41.970816, 42.198211, 42.370515, 42.665520, 42.801647, 42.990911, 43.167197, 43.248040, 43.364099, 43.546022, 43.687216, 43.878082, 44.175912, 44.296484, 44.480183, 44.735013, 44.955220, 45.180959, 45.440563, 45.602785, 45.854514, 46.119771, 46.354144, 46.637226, 46.802020, 47.064375, 47.293325, 47.600600, 47.942410, 48.084645, 48.248270, 48.452844, 48.562037, 48.783308, 49.000954, 49.106158, 49.308066, 49.545724, 49.723527, 49.797322, 49.912204, 50.072509, 50.334711, 50.495871, 50.697915, 50.979404, 51.184334, 51.457241, 51.697307, 51.933691, 52.128777, 52.381847, 52.588667, 52.701999, 52.865311, 53.116559, 53.249561, 53.463823, 53.703224, 53.817319, 53.943620, 54.104870, 54.211887, 54.378584, 54.632454, 54.776713, 54.928092, 55.102059, 55.282956, 55.451136, 55.568920, 55.758587, 56.015158, 56.144269, 56.249775, 56.411278, 56.664312, 56.885248, 57.085017, 57.229359, 57.422860, 57.581454, 57.841882, 58.030485, 58.198464, 58.421702, 58.605601, 58.799438, 59.010001, 59.215526, 59.447539, 59.632342, 59.806755, 59.999119, 60.218804, 60.276770, 60.432077, 60.625365, 60.884854, 61.100611, 61.348038, 61.588571, 61.804810, 62.023183, 62.296785, 62.466766, 62.656630, 62.926558, 63.084818, 63.310502, 63.435829, 63.580870, 63.775586, 63.977501, 64.133986, 64.298246, 64.565885, 64.713450, 64.873100, 65.112425, 65.327679, 65.485159, 65.581858, 65.806973, 65.934700, 66.132809, 66.326095, 66.518292, 66.772609, 66.868096, 67.094002, 67.287708, 67.460091, 67.640388, 67.794112, 67.943852, 68.167378, 68.382840, 68.681285, 68.863888, 69.125278, 69.334747, 69.561068, 69.814071, 69.905926, 70.040454, 70.345631, 70.550051, 70.546986, 70.620049, 70.587127, 70.703986, 70.769528, 70.740885, 70.838860, 70.774791, 70.793872, 70.781461, 70.736492, 70.749171, 70.678359, 70.610119, 70.641108, 70.660672, 70.574677, 70.573878, 70.616131, 70.599945, 70.652125, 70.594943, 70.598392, 70.509733, 70.522286, 70.519587, 70.557196, 70.615054, 70.550030, 70.518076, 70.543389, 70.504245, 70.506726, 70.496345, 70.517357, 70.576651, 70.600761, 70.587937, 70.599568, 70.596417, 70.530044, 70.480274, 70.500090, 70.500999, 70.467419, 70.462004, 70.523975, 70.539589, 70.575610, 70.517226, 70.654142, 70.730674, 70.734797, 70.649435, 70.623178, 70.638021, 70.592359, 70.606862, 70.536081, 70.479968, 70.576917, 70.524486, 70.543749, 70.562727, 70.502626, 70.441434, 70.414218, 70.406730, 70.373622, 70.326904, 70.265856, 70.285087, 70.352795, 70.346946, 70.294017, 70.274948, 70.312513, 70.385523, 70.374935, 70.394926, 70.330492, 70.295087, 70.297767, 70.302900, 70.298366, 70.354958, 70.399329, 70.372647, 70.418439, 70.442929, 70.303356, 70.352340, 70.368262, 70.419488, 70.388272, 70.346671, 70.394788, 70.407683, 70.377128, 70.398050, 70.370732, 70.452685, 70.422423, 70.399055, 70.342998, 70.386769, 70.397942, 70.424641, 70.458767, 70.469745, 70.414146, 70.240430, 70.261319, 70.295100, 70.249922, 70.188150, 70.173364, 70.158282, 70.096740, 70.034680, 69.956242, 70.010396, 69.964762, 69.998018, 69.951909, 69.916629, 69.978624, 70.002499, 70.054303, 70.055489, 69.999170, 69.986146, 70.005314, 70.067949, 70.114535, 69.985688, 70.013943, 70.026738, 70.000578, 69.940924, 69.989466, 70.073604, 70.102764, 70.096531, 70.106834, 70.163803, 70.194657, 70.247950, 70.286540, 70.339920, 70.340128, 70.338483, 70.343976, 70.309545, 70.270701, 70.262599, 70.290405, 70.212598, 70.222153, 70.261537, 70.307382, 70.339084, 70.294450, 70.341348, 70.397714, 70.372527, 70.450066, 70.369677, 70.345928, 70.275400, 70.317096, 70.428629, 70.412967, 70.457814, 70.411688, 70.338045, 70.302102, 70.304518, 70.374788, 70.325185, 70.238054, 70.230616, 70.165194, 70.169644, 70.088300, 70.064426, 70.086396, 70.091347, 70.028820, 70.019784, 70.119433, 70.141377, 70.133662, 70.133491, 70.153393, 70.135308, 70.097509, 70.012974, 70.087983, 70.023612 };
float P00[] = { 40000.000000, 39204.002500, 38423.845350, 37659.213328, 36909.797483, 36175.295013, 35455.409142, 34749.849000, 34058.329505, 33380.571248, 62.383325, 61.144397, 59.930124, 58.740014, 57.573588, 56.430373, 55.309909, 54.211742, 53.135428, 52.080533, 28.098958, 27.542289, 26.996697, 26.461963, 25.937870, 25.424206, 24.920765, 24.427341, 23.943737, 23.469757, 16.816321, 16.484177, 16.158641, 15.839584, 15.526877, 15.220392, 14.920006, 14.625598, 14.337049, 14.054241, 11.289119, 11.066965, 10.849233, 10.635833, 10.426680, 10.221689, 10.020777, 9.823864, 9.630869, 9.441715, 8.062612, 7.904666, 7.749863, 7.598141, 7.449438, 7.303694, 7.160851, 7.020850, 6.883635, 6.749151, 5.984033, 5.867451, 5.753188, 5.641200, 5.531440, 5.423864, 5.318430, 5.215093, 5.113812, 5.014548, 4.558787, 4.470567, 4.384103, 4.299359, 4.216302, 4.134898, 4.055113, 3.976916, 3.900276, 3.825160, 3.539248, 3.471317, 3.404737, 3.339483, 3.275527, 3.212844, 3.151409, 3.091196, 3.032181, 2.974341, 2.787634, 2.734660, 2.682741, 2.631854, 2.581980, 2.533099, 2.485190, 2.438235, 2.392214, 2.347109, 2.221152, 2.179451, 2.138580, 2.098522, 2.059262, 2.020782, 1.983069, 1.946106, 1.909878, 1.874372, 1.787047, 1.753985, 1.721580, 1.689821, 1.658693, 1.628185, 1.598285, 1.568979, 1.540256, 1.512105, 1.450130, 1.423772, 1.397939, 1.372620, 1.347805, 1.323484, 1.299646, 1.276283, 1.253385, 1.230943, 1.186053, 1.164951, 1.144268, 1.123998, 1.104130, 1.084658, 1.065573, 1.046868, 1.028536, 1.010568, 0.977468, 0.960516, 0.943902, 0.927618, 0.911659, 0.896017, 0.880686, 0.865660, 0.850934, 0.836500, 0.811706, 0.798053, 0.784672, 0.771557, 0.758703, 0.746105, 0.733758, 0.721656, 0.709795, 0.698170, 0.679339, 0.668320, 0.657520, 0.646936, 0.636562, 0.626394, 0.616429, 0.606662, 0.597089, 0.587707, 0.573229, 0.564322, 0.555592, 0.547036, 0.538650, 0.530431, 0.522375, 0.514480, 0.506742, 0.499157, 0.487905, 0.480696, 0.473630, 0.466705, 0.459917, 0.453265, 0.446745, 0.440355, 0.434092, 0.427953, 0.419124, 0.413284, 0.407560, 0.401949, 0.396450, 0.391061, 0.385779, 0.380602, 0.375528, 0.370555, 0.363568, 0.358833, 0.354192, 0.349644, 0.345186, 0.340817, 0.336535, 0.332338, 0.328224, 0.324192, 0.318621, 0.314781, 0.311017, 0.307327, 0.303711, 0.300168, 0.296694, 0.293290, 0.289954, 0.286684, 0.282210, 0.279094, 0.276040, 0.273047, 0.270113, 0.267238, 0.264420, 0.261658, 0.258951, 0.256298, 0.252682, 0.250154, 0.247675, 0.245247, 0.242866, 0.240533, 0.238247, 0.236006, 0.233809, 0.231656, 0.228715, 0.226664, 0.224653, 0.222683, 0.220751, 0.218858, 0.217003, 0.215185, 0.213403, 0.211656, 0.209249, 0.207585, 0.205954, 0.204356, 0.202789, 0.201254, 0.199749, 0.198274, 0.196828, 0.195411, 0.193430, 0.192081, 0.190758, 0.189462, 0.188192, 0.186947, 0.185727, 0.184531, 0.183358, 0.182210, 0.180568, 0.179474, 0.178403, 0.177353, 0.176323, 0.175315, 0.174326, 0.173357, 0.172407, 0.171476, 0.170106, 0.169221, 0.168354, 0.167503, 0.166670, 0.165853, 0.165053, 0.164268, 0.163499, 0.162746, 0.161595, 0.160879, 0.160177, 0.159490, 0.158816, 0.158156, 0.157508, 0.156874, 0.156252, 0.155643, 0.154668, 0.154090, 0.153524, 0.152969, 0.152424, 0.151891, 0.151369, 0.150856, 0.150354, 0.149862, 0.149030, 0.148564, 0.148108, 0.147660, 0.147222, 0.146792, 0.146371, 0.145958, 0.145554, 0.145157, 0.144440, 0.144065, 0.143698, 0.143339, 0.142986, 0.142641, 0.142302, 0.141971, 0.141645, 0.141327, 0.140702, 0.140402, 0.140108, 0.139820, 0.139538, 0.139261, 0.138990, 0.138724, 0.138463, 0.138208, 0.137659, 0.137420, 0.137185, 0.136955, 0.136730, 0.136509, 0.136292, 0.136080, 0.135872, 0.135668, 0.135181, 0.134991, 0.134804, 0.134622, 0.134443, 0.134267, 0.134095, 0.133927, 0.133762, 0.133600, 0.133162, 0.133012, 0.132865, 0.132721, 0.132580, 0.132442, 0.132306, 0.132173, 0.132043, 0.131916, 0.131518, 0.131401, 0.131286, 0.131174, 0.131063, 0.130955, 0.130849, 0.130745, 0.130643, 0.130544, 0.130179, 0.130089, 0.130000, 0.129913, 0.129828, 0.129744, 0.129662, 0.129582, 0.129503, 0.129426, 0.129089, 0.129020, 0.128952, 0.128886, 0.128821, 0.128758, 0.128695, 0.128634, 0.128575, 0.128516, 0.128200, 0.128149, 0.128099, 0.128050, 0.128001, 0.127954, 0.127908, 0.127863, 0.127818, 0.127774, 0.127476, 0.127440, 0.127404, 0.127368, 0.127334, 0.127300, 0.127266, 0.127234, 0.127202, 0.127171, 0.126887, 0.126862, 0.126837, 0.126813, 0.126790, 0.126766, 0.126744, 0.126722, 0.126700, 0.126678, 0.126406, 0.126391, 0.126376, 0.126361, 0.126346, 0.126332, 0.126318, 0.126304, 0.126291, 0.126278, 0.126015, 0.126008, 0.126000, 0.125993, 0.125985, 0.125978, 0.125971, 0.125964, 0.125958, 0.125951, 0.125696, 0.125695, 0.125694, 0.125692, 0.125691, 0.125690, 0.125689, 0.125688, 0.125686, 0.125685, 0.125437, 0.125441, 0.125444, 0.125448, 0.125452, 0.125455, 0.125459, 0.125462, 0.125465, 0.125468, 0.125225, 0.125233, 0.125241, 0.125249, 0.125256, 0.125264, 0.125271, 0.125278, 0.125285, 0.125292, 0.125053, 0.125064, 0.125076, 0.125087, 0.125097, 0.125108, 0.125118, 0.125128, 0.125138, 0.125148, 0.124913, 0.124927, 0.124941, 0.124954, 0.124968, 0.124981, 0.124994, 0.125006, 0.125019, 0.125031 };

void init_filter()
{
    R(0, 0) = 62.5;
    ukf.C[0] = 1;
    ukf.C[1] = 10000;
    ukf.C[2] = 100;
    ukf.C[3] = 20;
    ukf.X[0] = 0.0;
    ukf.P(0, 0) = 40000.0;
    ukf.Cov_U(0, 0) = 250000.0;
    ukf.setMeasurementFunction(h,1);
}
// <DATA_END>


void test_ctor_dtor()
{
    ukf.setMeasurementFunction(h, 1);
    ukf.X[0] = EXTERNAL_TEMPERATURE; // initial temperature
    ukf.P.fill(0); // initial covariance
    ukf.Cov_U.fill(PROCESS_NOISE*PROCESS_NOISE);
    R.fill(MEASURE_NOISE*MEASURE_NOISE);
    ukf.C[0] = TIME_STEP;
    ukf.C[1] = THERMAL_INERTIA;
    ukf.C[2] = THERMAL_LOSSES;
    ukf.C[3] = EXTERNAL_TEMPERATURE;

    TEST_ASSERT_EQUAL(1, ukf.X.size());
    TEST_ASSERT_EQUAL(1, ukf.U.size());
    TEST_ASSERT_EQUAL(4, ukf.C.size());

    //check if everything is initialized correctly
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE, ukf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0, ukf.P(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, PROCESS_NOISE*PROCESS_NOISE, ukf.Cov_U[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, MEASURE_NOISE*MEASURE_NOISE, R(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, TIME_STEP, ukf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_INERTIA, ukf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_LOSSES, ukf.C[2]);
}

void test_predict()
{
    ukf.U[0] = 10; // heating power
    ukf.predict(); // first prediction is considered with step time 0, if you don't want that, you can set ukf.initted to true before calling predict
    TEST_ASSERT_FLOAT_WITHIN(1e-6, PROCESS_NOISE*PROCESS_NOISE, ukf.Cov_U[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, MEASURE_NOISE*MEASURE_NOISE, R(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, TIME_STEP, ukf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_INERTIA, ukf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_LOSSES, ukf.C[2]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE + 1, ukf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0.0025, ukf.P(0, 0));
}

void test_update()
{
    ukf.X[0] = EXTERNAL_TEMPERATURE; // reset temperature
    ukf.P.fill(1); // reset covariance
    R.fill(MEASURE_NOISE*MEASURE_NOISE);
    ukf.C[1] = THERMAL_INERTIA;
    ukf.C[2] = THERMAL_LOSSES;
    ukf.C[3] = EXTERNAL_TEMPERATURE;
    Z[0] = EXTERNAL_TEMPERATURE + 5; // measurement
    ukf.update(Z, R);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 20.18518, ukf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0.962963, ukf.P(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, PROCESS_NOISE*PROCESS_NOISE, ukf.Cov_U[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, MEASURE_NOISE*MEASURE_NOISE, R(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, TIME_STEP, ukf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_INERTIA, ukf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_LOSSES, ukf.C[2]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE, ukf.C[3]);
}

// #include <iostream>
void test_DATA()
{
    init_filter();
    ukf.setMeasurementFunction(h, 1);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 1.0, ukf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 10000.0, ukf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 100.0, ukf.C[2]);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 20.0, ukf.C[3]);

    for (int i = 1; i < sizeof(ZZ)/sizeof(ZZ[0]); i++)
    {
        ukf.U[0] = UU[i];
        ukf.predict();
        if (!isnan(ZZ[i]))
        {
            Z[0] = ZZ[i];
            ukf.update(Z, R);
        }
        // TEST_ASSERT_TRUE(fabs((XX_hat[i] - ukf.X[0])/XX_hat[i]) < 1e-5);
        // TEST_ASSERT_TRUE(fabs((sqrt(P00[i]) - sqrt(ukf.P(0, 0)))/sqrt(P00[i])) < 1e-5);
        TEST_ASSERT_FLOAT_WITHIN(1e-5, XX_hat[i], ukf.X[0]);
        TEST_ASSERT_FLOAT_WITHIN(1e-5, P00[i], ukf.P(0, 0));
    }
}

void setUp() {
    // Initialisation avant chaque test (laisser vide si inutile)
}

void tearDown() {
    // Nettoyage après chaque test (laisser vide si inutile)
}


void setup() {
    #ifndef NATIVE
    delay(2000); // Permet d'attendre que la liaison série soit établie
    #endif
    UNITY_BEGIN();
    RUN_TEST(test_ctor_dtor);
    RUN_TEST(test_predict);
    RUN_TEST(test_update);
    RUN_TEST(test_DATA);
    UNITY_END();
}

void loop() {
}

#ifdef NATIVE
int main(int argc, char **argv) {
    setup();
}
#endif

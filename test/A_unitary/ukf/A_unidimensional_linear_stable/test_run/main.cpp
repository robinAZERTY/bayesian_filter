/*
to run all the test use the following command
pio test -e native
*/


/*
To test the basic functionalities of the ukf, here is an example of a simple one-dimensional problem.
Temperature estimation in a controlled environment (such as an oven with a heating element).
The scenario is as follows:
You have an oven, and you want to precisely control its temperature using a heating element.
Let's assume you only have a temperature sensor that is highly imprecise, with significant noise and a low sampling rate.
You also have a physical model of the oven, allowing you to predict the temperature based on the heating power.

The constants characterizing the oven are as follows:
- Thermal inertia: the oven heats up and cools down slowly.
- Thermal losses: the temperature inside the oven tends to equalize naturally with the external temperature.
- External temperature: the external temperature is a known value.

x: oven temperature
u: heating power
c: oven parameters (time step, thermal inertia, thermal losses, external temperature)

The oven temperature evolves according to the following formula:
f(x, u, c) = x + u * c0 / c1 - c0 * (x - c3) / c2

The measurement function is simply the temperature measured by the sensor:
h(x, c) = x

Note: An Extended Kalman Filter (ukf) may not be the ideal solution for this problem since it is linear,
but it should be a good way to check that the ukf is functioning correctly for simple problems.
*/


#include <unity.h>
#include <ukf.hpp>

// #ifdef NATIVE
// #define NAN std::nan("")
// #endif

#define TIME_STEP 10
#define THERMAL_INERTIA 100
#define THERMAL_LOSSES 2
#define EXTERNAL_TEMPERATURE 20

#define MEASURE_NOISE 5
#define PROCESS_NOISE 0.5

// Note : In ukf, c[0] is always the time step, c[1:] are the remaining parameters

template <typename T>
internal::tmp<Vector<T>> && f(const Vector<T> &x, const Vector<T> &u, const Vector<T> &c)
{
    auto *ret = internal::tmp<Vector<T>>::get(x.size()); // ask for a temporary variable of the same size as x
    (*ret)[0] = x[0] + c[0] *(u[0]/c[1] - (x[0]-c[3])/c[2]); // compute the new temperature
    return internal::move(*ret); // return the temporary variable
}

// simple measurement function
template <typename T>
internal::tmp<Vector<T>> && h(const Vector<T> &x, const Vector<T> &c)
{
    auto *ret = internal::tmp<Vector<T>>::get(1); // ask for a temporary variable of size 2
    (*ret)[0] = x[0];
    return internal::move(*ret);
}

Ukf<1, 1, 4, 1, double> ukf(f); // 1 state, 1 command, 4 parameters

Vector<double> Z(1); // measurement
symMatrix<double> R(1, 1); // measurement noise

// <DATA_START>
float Time[] = { 0.000000, 1.000000, 2.000000, 3.000000, 4.000000, 5.000000, 6.000000, 7.000000, 8.000000, 9.000000, 10.000000, 11.000000, 12.000000, 13.000000, 14.000000, 15.000000, 16.000000, 17.000000, 18.000000, 19.000000, 20.000000, 21.000000, 22.000000, 23.000000, 24.000000, 25.000000, 26.000000, 27.000000, 28.000000, 29.000000, 30.000000, 31.000000, 32.000000, 33.000000, 34.000000, 35.000000, 36.000000, 37.000000, 38.000000, 39.000000, 40.000000, 41.000000, 42.000000, 43.000000, 44.000000, 45.000000, 46.000000, 47.000000, 48.000000, 49.000000, 50.000000, 51.000000, 52.000000, 53.000000, 54.000000, 55.000000, 56.000000, 57.000000, 58.000000, 59.000000, 60.000000, 61.000000, 62.000000, 63.000000, 64.000000, 65.000000, 66.000000, 67.000000, 68.000000, 69.000000, 70.000000, 71.000000, 72.000000, 73.000000, 74.000000, 75.000000, 76.000000, 77.000000, 78.000000, 79.000000, 80.000000, 81.000000, 82.000000, 83.000000, 84.000000, 85.000000, 86.000000, 87.000000, 88.000000, 89.000000, 90.000000, 91.000000, 92.000000, 93.000000, 94.000000, 95.000000, 96.000000, 97.000000, 98.000000, 99.000000, 100.000000, 101.000000, 102.000000, 103.000000, 104.000000, 105.000000, 106.000000, 107.000000, 108.000000, 109.000000, 110.000000, 111.000000, 112.000000, 113.000000, 114.000000, 115.000000, 116.000000, 117.000000, 118.000000, 119.000000, 120.000000, 121.000000, 122.000000, 123.000000, 124.000000, 125.000000, 126.000000, 127.000000, 128.000000, 129.000000, 130.000000, 131.000000, 132.000000, 133.000000, 134.000000, 135.000000, 136.000000, 137.000000, 138.000000, 139.000000, 140.000000, 141.000000, 142.000000, 143.000000, 144.000000, 145.000000, 146.000000, 147.000000, 148.000000, 149.000000, 150.000000, 151.000000, 152.000000, 153.000000, 154.000000, 155.000000, 156.000000, 157.000000, 158.000000, 159.000000, 160.000000, 161.000000, 162.000000, 163.000000, 164.000000, 165.000000, 166.000000, 167.000000, 168.000000, 169.000000, 170.000000, 171.000000, 172.000000, 173.000000, 174.000000, 175.000000, 176.000000, 177.000000, 178.000000, 179.000000, 180.000000, 181.000000, 182.000000, 183.000000, 184.000000, 185.000000, 186.000000, 187.000000, 188.000000, 189.000000, 190.000000, 191.000000, 192.000000, 193.000000, 194.000000, 195.000000, 196.000000, 197.000000, 198.000000, 199.000000, 200.000000, 201.000000, 202.000000, 203.000000, 204.000000, 205.000000, 206.000000, 207.000000, 208.000000, 209.000000, 210.000000, 211.000000, 212.000000, 213.000000, 214.000000, 215.000000, 216.000000, 217.000000, 218.000000, 219.000000, 220.000000, 221.000000, 222.000000, 223.000000, 224.000000, 225.000000, 226.000000, 227.000000, 228.000000, 229.000000, 230.000000, 231.000000, 232.000000, 233.000000, 234.000000, 235.000000, 236.000000, 237.000000, 238.000000, 239.000000, 240.000000, 241.000000, 242.000000, 243.000000, 244.000000, 245.000000, 246.000000, 247.000000, 248.000000, 249.000000, 250.000000, 251.000000, 252.000000, 253.000000, 254.000000, 255.000000, 256.000000, 257.000000, 258.000000, 259.000000, 260.000000, 261.000000, 262.000000, 263.000000, 264.000000, 265.000000, 266.000000, 267.000000, 268.000000, 269.000000, 270.000000, 271.000000, 272.000000, 273.000000, 274.000000, 275.000000, 276.000000, 277.000000, 278.000000, 279.000000, 280.000000, 281.000000, 282.000000, 283.000000, 284.000000, 285.000000, 286.000000, 287.000000, 288.000000, 289.000000, 290.000000, 291.000000, 292.000000, 293.000000, 294.000000, 295.000000, 296.000000, 297.000000, 298.000000, 299.000000, 300.000000, 301.000000, 302.000000, 303.000000, 304.000000, 305.000000, 306.000000, 307.000000, 308.000000, 309.000000, 310.000000, 311.000000, 312.000000, 313.000000, 314.000000, 315.000000, 316.000000, 317.000000, 318.000000, 319.000000, 320.000000, 321.000000, 322.000000, 323.000000, 324.000000, 325.000000, 326.000000, 327.000000, 328.000000, 329.000000, 330.000000, 331.000000, 332.000000, 333.000000, 334.000000, 335.000000, 336.000000, 337.000000, 338.000000, 339.000000, 340.000000, 341.000000, 342.000000, 343.000000, 344.000000, 345.000000, 346.000000, 347.000000, 348.000000, 349.000000, 350.000000, 351.000000, 352.000000, 353.000000, 354.000000, 355.000000, 356.000000, 357.000000, 358.000000, 359.000000, 360.000000, 361.000000, 362.000000, 363.000000, 364.000000, 365.000000, 366.000000, 367.000000, 368.000000, 369.000000, 370.000000, 371.000000, 372.000000, 373.000000, 374.000000, 375.000000, 376.000000, 377.000000, 378.000000, 379.000000, 380.000000, 381.000000, 382.000000, 383.000000, 384.000000, 385.000000, 386.000000, 387.000000, 388.000000, 389.000000, 390.000000, 391.000000, 392.000000, 393.000000, 394.000000, 395.000000, 396.000000, 397.000000, 398.000000, 399.000000, 400.000000, 401.000000, 402.000000, 403.000000, 404.000000, 405.000000, 406.000000, 407.000000, 408.000000, 409.000000, 410.000000, 411.000000, 412.000000, 413.000000, 414.000000, 415.000000, 416.000000, 417.000000, 418.000000, 419.000000, 420.000000, 421.000000, 422.000000, 423.000000, 424.000000, 425.000000, 426.000000, 427.000000, 428.000000, 429.000000, 430.000000, 431.000000, 432.000000, 433.000000, 434.000000, 435.000000, 436.000000, 437.000000, 438.000000, 439.000000, 440.000000, 441.000000, 442.000000, 443.000000, 444.000000, 445.000000, 446.000000, 447.000000, 448.000000, 449.000000, 450.000000, 451.000000, 452.000000, 453.000000, 454.000000, 455.000000, 456.000000, 457.000000, 458.000000, 459.000000, 460.000000, 461.000000, 462.000000, 463.000000, 464.000000, 465.000000, 466.000000, 467.000000, 468.000000, 469.000000, 470.000000, 471.000000, 472.000000, 473.000000, 474.000000, 475.000000, 476.000000, 477.000000, 478.000000, 479.000000, 480.000000, 481.000000, 482.000000, 483.000000, 484.000000, 485.000000, 486.000000, 487.000000, 488.000000, 489.000000, 490.000000, 491.000000, 492.000000, 493.000000, 494.000000, 495.000000, 496.000000, 497.000000, 498.000000, 499.000000 };
float XX[] = { 20.000000, 20.102000, 20.204980, 20.308930, 20.413841, 20.519702, 20.626505, 20.734240, 20.842898, 20.952469, 21.062944, 21.174315, 21.286572, 21.399706, 21.513709, 21.628572, 21.744286, 21.860843, 21.978235, 22.096453, 22.215488, 22.335333, 22.455980, 22.577420, 22.699646, 22.822649, 22.946423, 23.070959, 23.196249, 23.322287, 23.449064, 23.576573, 23.704807, 23.833759, 23.963422, 24.093787, 24.224850, 24.356601, 24.489035, 24.622145, 24.755923, 24.890364, 25.025460, 25.161206, 25.297594, 25.434618, 25.572272, 25.710549, 25.849443, 25.988949, 26.129059, 26.269769, 26.411071, 26.552960, 26.695431, 26.838477, 26.982092, 27.126271, 27.271008, 27.416298, 27.562135, 27.708514, 27.855429, 28.002874, 28.150846, 28.299337, 28.448344, 28.597860, 28.747882, 28.898403, 29.049419, 29.200925, 29.352915, 29.505386, 29.658332, 29.811749, 29.965632, 30.119975, 30.274776, 30.430028, 30.585727, 30.741870, 30.898452, 31.055467, 31.212912, 31.370783, 31.529075, 31.687785, 31.846907, 32.006438, 32.166373, 32.326710, 32.487443, 32.648568, 32.810082, 32.971982, 33.134262, 33.296919, 33.459950, 33.623350, 33.787117, 33.951246, 34.115733, 34.280576, 34.445770, 34.611313, 34.777199, 34.943427, 35.109993, 35.276893, 35.444124, 35.611683, 35.779566, 35.947771, 36.116293, 36.285130, 36.454279, 36.623736, 36.793498, 36.963563, 37.133928, 37.304589, 37.475543, 37.646787, 37.818319, 37.990136, 38.162235, 38.334612, 38.507266, 38.680194, 38.853392, 39.026858, 39.200589, 39.374583, 39.548838, 39.723349, 39.898116, 40.073134, 40.248403, 40.423919, 40.599680, 40.775683, 40.951926, 41.128407, 41.305123, 41.482072, 41.659251, 41.836659, 42.014292, 42.192149, 42.370228, 42.548525, 42.727040, 42.905770, 43.084712, 43.263865, 43.443226, 43.622794, 43.802566, 43.982540, 44.162715, 44.343088, 44.523657, 44.704420, 44.885376, 45.066522, 45.247857, 45.429379, 45.611085, 45.792974, 45.975044, 46.157294, 46.339721, 46.522324, 46.705100, 46.888049, 47.071169, 47.254457, 47.437913, 47.621533, 47.805318, 47.989265, 48.173372, 48.357639, 48.542062, 48.726642, 48.911375, 49.096261, 49.281299, 49.466486, 49.651821, 49.837303, 50.022930, 50.208700, 50.394613, 50.580667, 50.766861, 50.953192, 51.139660, 51.326263, 51.513001, 51.699871, 51.886872, 52.074003, 52.261263, 52.448651, 52.636164, 52.823803, 53.011565, 53.199449, 53.387454, 53.575580, 53.763824, 53.952186, 54.140664, 54.329257, 54.517965, 54.706785, 54.895717, 55.084760, 55.273912, 55.463173, 55.652542, 55.842016, 56.031596, 56.221280, 56.411067, 56.600957, 56.790947, 56.981038, 57.171227, 57.361515, 57.551900, 57.742381, 57.932957, 58.123627, 58.314391, 58.505247, 58.696195, 58.887233, 59.078360, 59.269577, 59.460881, 59.652272, 59.843750, 60.035312, 60.226959, 60.418689, 60.610502, 60.802397, 60.994373, 61.186430, 61.378565, 61.570780, 61.763072, 61.955441, 62.147887, 62.340408, 62.533004, 62.725674, 62.918417, 63.111233, 63.304121, 63.497079, 63.690109, 63.883208, 64.076375, 64.269612, 64.462916, 64.656286, 64.849724, 65.043226, 65.236794, 65.430426, 65.624122, 65.817881, 66.011702, 66.205585, 66.399529, 66.593534, 66.787598, 66.981722, 67.175905, 67.370146, 67.564445, 67.758800, 67.953212, 68.147680, 68.342203, 68.536781, 68.731413, 68.926099, 69.120838, 69.315630, 69.510474, 69.705369, 69.900315, 70.095312, 70.290359, 70.485455, 70.480601, 70.475795, 70.471037, 70.466326, 70.461663, 70.457047, 70.452476, 70.447951, 70.443472, 70.439037, 70.434647, 70.430300, 70.425997, 70.421737, 70.417520, 70.413345, 70.409211, 70.405119, 70.401068, 70.397057, 70.393087, 70.389156, 70.385264, 70.381412, 70.377598, 70.373822, 70.370083, 70.366382, 70.362719, 70.359091, 70.355501, 70.351946, 70.348426, 70.344942, 70.341492, 70.338077, 70.334697, 70.331350, 70.328036, 70.324756, 70.321508, 70.318293, 70.315110, 70.311959, 70.308840, 70.305751, 70.302694, 70.299667, 70.296670, 70.293703, 70.290766, 70.287859, 70.284980, 70.282130, 70.279309, 70.276516, 70.273751, 70.271013, 70.268303, 70.265620, 70.262964, 70.260334, 70.257731, 70.255154, 70.252602, 70.250076, 70.247575, 70.245100, 70.242649, 70.240222, 70.237820, 70.235442, 70.233087, 70.230756, 70.228449, 70.226164, 70.223903, 70.221664, 70.219447, 70.217253, 70.215080, 70.212929, 70.210800, 70.208692, 70.206605, 70.204539, 70.202494, 70.200469, 70.198464, 70.196479, 70.194514, 70.192569, 70.190644, 70.188737, 70.186850, 70.184981, 70.183132, 70.181300, 70.179487, 70.177692, 70.175915, 70.174156, 70.172415, 70.170691, 70.168984, 70.167294, 70.165621, 70.163965, 70.162325, 70.160702, 70.159095, 70.157504, 70.155929, 70.154369, 70.152826, 70.151298, 70.149785, 70.148287, 70.146804, 70.145336, 70.143882, 70.142444, 70.141019, 70.139609, 70.138213, 70.136831, 70.135462, 70.134108, 70.132767, 70.131439, 70.130125, 70.128823, 70.127535, 70.126260, 70.124997, 70.123747, 70.122510, 70.121285, 70.120072, 70.118871, 70.117682, 70.116506, 70.115341, 70.114187, 70.113045, 70.111915, 70.110796, 70.109688, 70.108591, 70.107505, 70.106430, 70.105366, 70.104312, 70.103269, 70.102236, 70.101214, 70.100202, 70.099200, 70.098208, 70.097226, 70.096253, 70.095291, 70.094338, 70.093394, 70.092461, 70.091536, 70.090621, 70.089714, 70.088817, 70.087929, 70.087050, 70.086179, 70.085317, 70.084464, 70.083620, 70.082783, 70.081956, 70.081136, 70.080325, 70.079521, 70.078726, 70.077939, 70.077160, 70.076388, 70.075624, 70.074868, 70.074119, 70.073378, 70.072644, 70.071918, 70.071199, 70.070487, 70.069782, 70.069084, 70.068393, 70.067709, 70.067032, 70.066362, 70.065698, 70.065041 };
float UU[] = { -631.226227, 1086.197575, 1087.072935, 830.659935, 1642.879055, 1204.188951, 1174.782295, 1081.212865, 1059.318794, 750.517901, 532.752319, 1894.615336, 2026.120729, 1166.008353, 1629.608396, 1460.103757, 1990.089685, 1726.358986, 1264.687922, 1269.735482, 1672.936998, 2256.112985, 1525.155032, 1145.543997, 1685.001820, 2412.569081, 1274.948757, 1350.502326, 1817.501447, 1145.374172, 1677.794546, 772.650912, 2641.936966, 1124.052507, 2488.166941, 1144.328209, 2111.348322, 2299.298086, 1655.797765, 2051.874757, 1514.682199, 2290.576123, 1488.218873, 1411.821089, 1751.420065, 2218.975835, 2074.897531, 2130.498769, 2506.505607, 1574.181425, 2587.457286, 2169.553132, 1973.053630, 1951.121115, 2618.246477, 2397.430848, 1823.772622, 2156.281385, 2455.975805, 2354.077488, 2226.166160, 2779.985018, 3189.469139, 2481.981601, 2071.529105, 2197.760277, 2140.357531, 2572.074195, 2236.029952, 1821.519388, 2763.200727, 1898.372574, 2778.370896, 2574.593945, 2717.945516, 2114.191279, 2654.268303, 1989.578351, 1841.202158, 2002.433792, 2628.806210, 3239.787220, 3364.115663, 2655.484509, 3091.552311, 2382.897351, 3296.318522, 2647.932802, 3879.762340, 2907.357614, 2603.517655, 3387.604565, 3352.286117, 2798.832133, 2785.599189, 3297.289532, 2916.911934, 2321.229340, 3312.526231, 3011.836101, 3259.988376, 2690.754826, 2957.141015, 3150.607141, 3319.619183, 3542.814834, 2892.262064, 3584.657257, 3514.954680, 2986.966049, 3642.210774, 3929.475192, 3434.239437, 3660.635730, 3710.427825, 2932.540054, 2737.778067, 2530.504831, 2958.314341, 3405.484841, 2988.857430, 2734.543133, 3216.608449, 3766.654977, 3211.789113, 3203.751005, 4362.328606, 4048.988361, 4373.539742, 3189.277115, 2549.824247, 3784.275541, 3331.466234, 3758.634244, 3891.610470, 3932.416878, 3348.763502, 4378.103181, 3508.883374, 3770.045230, 3963.907321, 4590.953783, 2922.371097, 3310.667310, 3733.445514, 4181.833956, 3911.472072, 4664.778853, 4731.854285, 3705.828180, 4860.890295, 3659.511721, 3158.425892, 3911.465558, 4122.068406, 4045.332418, 3962.695196, 3894.168441, 4106.740628, 3886.522516, 4640.380021, 4163.570718, 3784.602334, 5098.768691, 4884.909602, 4190.722170, 3823.439948, 4746.805675, 3952.819930, 4135.107019, 4252.644364, 4644.193358, 5552.782082, 5565.286722, 5177.605581, 4439.863974, 4765.324121, 4824.982128, 4060.209921, 4667.090869, 4593.390221, 3714.854858, 4717.165034, 4707.397261, 4779.080032, 4144.674545, 4328.277884, 4052.576467, 4705.342602, 4817.715572, 4918.772414, 4604.358346, 4840.952751, 4294.829593, 5331.687281, 5195.477352, 5083.025436, 5511.061457, 4839.234959, 5398.210304, 4896.694279, 5215.650930, 4479.693407, 5491.935049, 5173.170373, 5036.077464, 5560.373425, 4886.424093, 4982.535718, 5435.664760, 4697.553511, 6193.218080, 5280.366836, 5820.032655, 4876.832078, 5492.244671, 5387.688331, 4836.276502, 5956.058814, 4117.022682, 5666.163342, 4324.774088, 4922.494710, 5349.694917, 5644.507668, 5811.764926, 5413.139658, 5743.865541, 4793.720799, 6290.094244, 5411.746878, 6506.060782, 5197.811800, 6267.825809, 6022.522940, 6205.232547, 5677.820352, 5820.339516, 5367.213724, 5834.725950, 5274.300373, 5729.427544, 5441.638504, 6594.259341, 5058.029370, 5408.305406, 6586.570559, 5948.869325, 5821.072930, 6028.965089, 6054.388800, 5433.423365, 4997.995325, 5700.464439, 6800.722568, 6644.388611, 5652.064411, 6124.641500, 6227.541765, 5795.020099, 6569.585813, 6358.336453, 6000.678128, 6415.704693, 5795.795164, 5900.979741, 6650.077867, 6596.227318, 6544.463901, 6379.904364, 7177.879910, 6968.263938, 6446.324020, 6097.738167, 6851.522040, 5574.666942, 6621.119457, 7188.664218, 5909.829748, 6827.078891, 6705.409870, 6704.219887, 6381.359028, 6913.115939, 6019.634585, 6995.723658, 7099.242685, 6511.158997, 6719.011457, 7641.976535, 6591.912858, 7301.534613, 6920.326005, 6723.962947, 7847.647253, 7057.383084, 7405.277583, 7261.521684, 7834.213489, 7584.820952, 6041.712588, 5285.197333, 5430.260886, 4888.784244, 5116.345684, 4422.594849, 4987.039418, 4906.199155, 5535.795443, 4779.824125, 4853.209061, 5510.955493, 5576.702698, 4983.154796, 4457.263593, 5136.796699, 5277.053449, 5653.123720, 3930.110808, 4489.448668, 5215.876415, 5063.748166, 5648.796460, 4827.082097, 4686.850792, 5970.847219, 5608.506094, 5285.863617, 4993.541473, 5097.161996, 5278.623172, 5163.655863, 5308.145580, 4352.967617, 4999.145828, 5553.482203, 5241.516084, 5526.418641, 5116.593991, 4771.633938, 5650.024895, 4433.998826, 4634.273082, 4882.873211, 4075.938906, 5582.958772, 4852.574740, 4521.187589, 5110.780596, 5323.725632, 4994.276540, 5797.733668, 3617.296189, 6006.569531, 5013.212049, 5354.592293, 4555.492367, 5019.837438, 4902.889934, 5159.893651, 4864.219390, 5013.922913, 5680.109575, 4731.017996, 4932.111026, 5358.222616, 5184.659732, 4755.874873, 4596.006622, 5528.305564, 4483.230682, 4689.722580, 4661.715291, 5468.980033, 4413.953561, 4942.515776, 4012.244754, 5678.268247, 5731.602051, 4757.942791, 5442.167798, 5923.246788, 5102.252887, 4071.793930, 5410.863331, 4830.409788, 5431.768314, 4895.784594, 4964.555730, 4357.090218, 5152.157786, 4350.865694, 5193.222560, 5102.221889, 4715.316373, 4601.830504, 4762.269818, 5194.345832, 5277.580590, 5283.972524, 4837.313631, 5439.140314, 5225.802094, 4689.314530, 4525.129599, 4904.578133, 5504.057651, 5379.990869, 5355.248138, 5338.439102, 5459.221881, 4575.734960, 4604.594298, 5116.264964, 5768.471925, 5381.811488, 5538.465992, 4772.899681, 5210.623588, 4542.498350, 5117.947346, 3966.262223, 4794.719622, 4789.864366, 5258.752684, 5278.830615, 4931.822047, 5253.667130, 4042.726925, 4401.941294, 5309.121892, 5245.282524, 4054.524574, 4665.785128, 4668.511248, 5339.387379, 4862.871554, 5877.831066, 5127.661956, 5181.917377, 5314.757929, 4595.952423, 4292.736557, 5094.870249, 4747.604864, 5158.913549, 5064.275635, 4054.725875, 5030.763174, 5025.692998, 4979.220002, 4488.494819, 5460.980260, 5104.280398, 5489.696256, 4164.828856, 5064.983099, 4763.913004, 4538.977409, 4924.505846, 4380.367417, 4253.409673, 3728.708802, 4638.647707, 4846.064906, 5513.739180, 4498.349298, 4210.829419, 5529.672649, 3865.757686, 5621.850840, 5673.915046, 4265.504659, 5222.515680, 5340.670790, 5016.241053, 5794.865936, 5012.649586, 5103.291027, 5242.072778, 5754.501309, 4637.507525, 4521.811979, 5193.238297, 4919.543242, 4922.702004, 5337.063395, 5635.638535, 5333.653664, 5203.951659, 5384.937357, 3596.130715, 4942.975818, 4604.923043, 4741.417307, 6116.208057, 5197.531409, 4939.738979, 4156.127348, 5968.653123 };
float ZZ[] = { NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 31.289210, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 33.102567, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 27.533786, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 20.690357, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 28.469351, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 33.347894, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 19.684994, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 26.381091, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 42.355310, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 33.054090, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 35.369719, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 45.143858, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 23.342408, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 44.390698, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 40.054415, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 35.759123, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 45.680703, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 67.376575, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 47.628586, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 44.933344, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 52.429321, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 65.101196, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 57.178676, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 52.367147, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 73.023476, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 66.379127, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 67.524764, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 64.855853, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 77.019860, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 62.294007, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 70.015476, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 62.527679, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 78.367103, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 64.814222, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 75.640445, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 69.298496, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 74.371633, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 73.198759, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 77.805494, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 65.261646, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 67.725222, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 62.787937, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 84.462289, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 66.433442, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 75.852647, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 69.099094, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 59.517335, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 58.995754, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, 52.835285, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN, NAN };
float XX_hat[] = { 0.000000, 0.308620, 0.614241, 0.891164, 1.246541, 1.554494, 1.856427, 2.145984, 2.430457, 2.681204, 31.235094, 31.312204, 31.401694, 31.404278, 31.453196, 31.484675, 31.568837, 31.625784, 31.635995, 31.646609, 32.329119, 32.431439, 32.459640, 32.449598, 32.493602, 32.609923, 32.611319, 32.620256, 32.675804, 32.663583, 31.313559, 31.277688, 31.429105, 31.427219, 31.561764, 31.560579, 31.656108, 31.769477, 31.817362, 31.904376, 29.905667, 30.035668, 30.084133, 30.124474, 30.198371, 30.318285, 30.422592, 30.531416, 30.676752, 30.727403, 30.568096, 30.679370, 30.769882, 30.857295, 31.010547, 31.140185, 31.211160, 31.314677, 31.447127, 31.568064, 31.835134, 31.994781, 32.193780, 32.320040, 32.403993, 32.499729, 32.588767, 32.720087, 32.816489, 32.870476, 32.045854, 32.115232, 32.271917, 32.406657, 32.554385, 32.640261, 32.779285, 32.850450, 32.906066, 32.977248, 32.729434, 32.926118, 33.133269, 33.267485, 33.443965, 33.547815, 33.741969, 33.869342, 34.118625, 34.268175, 34.741133, 34.932483, 35.118386, 35.247086, 35.373175, 35.549172, 35.685371, 35.760641, 35.934287, 36.076128, 36.128160, 36.235954, 36.369309, 36.520676, 36.687432, 36.874839, 36.995317, 37.183829, 37.363486, 37.488548, 37.611934, 37.828763, 37.993899, 38.180023, 38.369266, 38.478827, 38.567817, 38.635189, 38.744669, 38.897771, 39.149925, 39.231880, 39.361222, 39.544275, 39.670012, 39.793687, 40.031983, 40.236562, 40.471550, 40.585762, 40.307083, 40.482439, 40.610762, 40.780517, 40.961873, 41.145496, 41.268918, 41.494039, 41.629987, 41.790691, 42.006997, 42.246023, 42.315800, 42.423708, 42.572816, 42.765271, 42.928766, 43.165956, 43.407482, 43.543990, 43.746139, 43.874629, 43.951725, 44.103355, 44.274528, 44.436316, 44.588222, 44.731757, 44.895113, 45.034814, 45.145552, 45.310454, 45.435810, 45.691328, 45.922906, 46.082749, 46.204266, 46.416904, 46.548016, 46.696047, 46.843610, 47.039594, 47.324476, 47.607760, 47.849443, 48.014935, 48.211318, 48.411703, 48.533607, 48.714980, 49.031133, 49.112307, 49.292901, 49.470711, 49.653912, 49.771841, 49.906950, 50.013138, 50.183541, 50.363477, 50.532176, 50.687290, 50.864513, 50.985350, 51.208666, 51.416127, 51.610268, 51.845271, 52.010742, 52.230456, 52.354550, 52.552569, 52.675013, 52.897456, 53.085799, 53.258548, 53.482000, 53.635823, 53.797718, 54.003307, 54.124379, 54.402457, 54.586469, 54.822607, 54.962064, 55.161668, 55.348820, 55.478960, 55.719776, 55.774281, 56.024142, 56.096378, 56.227663, 56.400356, 56.600804, 56.815972, 56.989126, 57.193621, 57.301057, 57.557056, 57.720472, 57.993873, 58.133716, 58.379161, 58.597622, 58.832169, 59.011629, 59.203547, 59.348233, 59.538223, 59.643693, 59.820198, 59.966160, 60.225925, 60.329468, 60.467004, 60.720991, 60.908668, 61.081689, 61.273768, 61.504930, 61.633223, 61.716690, 61.869570, 62.130946, 62.374076, 62.515541, 62.702850, 62.898576, 63.049092, 63.285102, 63.488085, 63.653272, 63.858310, 63.999306, 64.149411, 64.372925, 64.588818, 64.797376, 64.987393, 65.261818, 65.506026, 65.695598, 65.848416, 66.075084, 66.171800, 66.372194, 66.627339, 66.752048, 66.967236, 67.161857, 67.360661, 67.525190, 67.741250, 67.865801, 68.086715, 68.315772, 68.483730, 68.670794, 68.948284, 69.138264, 69.377035, 69.575297, 69.751940, 70.039186, 70.244532, 70.482614, 70.703940, 70.980322, 71.229001, 71.298726, 71.314258, 71.344142, 71.319579, 71.318017, 71.247097, 71.233330, 71.211616, 71.253080, 71.218531, 71.188886, 71.228093, 71.273482, 71.259063, 71.192198, 71.193956, 71.209722, 71.262937, 71.143319, 71.080830, 71.071991, 71.067645, 71.121849, 71.093338, 71.051090, 71.137664, 71.187138, 71.203853, 71.191168, 71.188973, 71.220925, 71.225081, 71.243645, 71.166505, 71.154755, 71.198556, 71.210722, 71.251256, 71.250403, 71.215063, 71.253830, 71.184691, 71.136272, 71.113196, 71.009658, 71.057858, 71.032537, 70.974330, 70.975665, 70.998281, 70.997695, 71.067492, 70.918546, 71.010018, 71.001239, 71.026686, 70.971968, 70.964232, 70.944879, 70.951419, 70.924887, 70.917031, 70.975871, 70.939214, 70.923033, 70.949625, 70.958595, 70.924597, 70.874951, 70.919032, 70.865488, 70.825805, 70.783719, 70.822779, 70.755947, 70.742639, 70.636437, 70.697900, 70.764081, 70.732234, 70.774140, 70.858724, 70.860362, 70.758937, 70.792434, 70.767551, 70.803052, 70.784600, 70.773210, 70.701187, 70.723904, 70.651752, 70.664557, 70.668133, 70.632983, 70.586837, 70.557195, 70.571058, 70.593105, 70.615572, 70.582319, 70.620409, 70.636786, 70.599349, 70.545869, 70.530868, 70.575965, 70.608204, 70.637647, 70.665115, 70.698369, 70.648959, 70.602929, 70.608526, 70.679288, 70.710676, 70.757416, 70.727132, 70.740923, 70.687764, 70.676792, 70.566650, 70.540455, 70.514037, 70.534772, 70.557308, 70.544917, 70.564834, 70.463459, 70.399018, 70.454046, 70.474034, 70.374746, 70.337577, 70.301052, 70.331981, 70.314948, 70.399582, 70.408352, 70.422460, 70.441694, 70.396873, 70.322178, 70.328443, 70.299919, 70.312811, 70.316111, 70.218422, 70.219314, 70.219690, 70.226639, 70.173222, 70.217588, 70.225840, 70.272551, 70.186309, 70.190944, 70.165426, 70.117669, 70.108943, 70.044009, 69.968910, 69.842092, 69.807536, 69.794067, 69.847500, 69.798860, 69.721955, 69.777702, 69.666501, 69.711761, 69.782035, 69.710765, 69.735909, 69.772617, 69.776515, 69.858236, 69.860919, 69.872639, 69.898119, 69.952842, 69.917065, 69.870075, 69.890698, 69.883746, 69.877179, 69.912113, 69.976556, 70.010156, 70.030449, 70.034543, 69.893811, 69.889170, 69.850771, 69.826405, 69.939761, 69.960117, 69.954490, 69.870558, 69.968717 };
float P00[] = { 40000.000000, 39204.002500, 38423.845350, 37659.213328, 36909.797483, 36175.295013, 35455.409142, 34749.849000, 34058.329505, 33380.571248, 62.383325, 61.144397, 59.930124, 58.740014, 57.573588, 56.430373, 55.309909, 54.211742, 53.135428, 52.080533, 28.098958, 27.542289, 26.996697, 26.461963, 25.937870, 25.424206, 24.920765, 24.427341, 23.943737, 23.469757, 16.816321, 16.484177, 16.158641, 15.839584, 15.526877, 15.220392, 14.920006, 14.625598, 14.337049, 14.054241, 11.289119, 11.066965, 10.849233, 10.635833, 10.426680, 10.221689, 10.020777, 9.823864, 9.630869, 9.441715, 8.062612, 7.904666, 7.749863, 7.598141, 7.449438, 7.303694, 7.160851, 7.020850, 6.883635, 6.749151, 5.984033, 5.867451, 5.753188, 5.641200, 5.531440, 5.423864, 5.318430, 5.215093, 5.113812, 5.014548, 4.558787, 4.470567, 4.384103, 4.299359, 4.216302, 4.134898, 4.055113, 3.976916, 3.900276, 3.825160, 3.539248, 3.471317, 3.404737, 3.339483, 3.275527, 3.212844, 3.151409, 3.091196, 3.032181, 2.974341, 2.787634, 2.734660, 2.682741, 2.631854, 2.581980, 2.533099, 2.485190, 2.438235, 2.392214, 2.347109, 2.221152, 2.179451, 2.138580, 2.098522, 2.059262, 2.020782, 1.983069, 1.946106, 1.909878, 1.874372, 1.787047, 1.753985, 1.721580, 1.689821, 1.658693, 1.628185, 1.598285, 1.568979, 1.540256, 1.512105, 1.450130, 1.423772, 1.397939, 1.372620, 1.347805, 1.323484, 1.299646, 1.276283, 1.253385, 1.230943, 1.186053, 1.164951, 1.144268, 1.123998, 1.104130, 1.084658, 1.065573, 1.046868, 1.028536, 1.010568, 0.977468, 0.960516, 0.943902, 0.927618, 0.911659, 0.896017, 0.880686, 0.865660, 0.850934, 0.836500, 0.811706, 0.798053, 0.784672, 0.771557, 0.758703, 0.746105, 0.733758, 0.721656, 0.709795, 0.698170, 0.679339, 0.668320, 0.657520, 0.646936, 0.636562, 0.626394, 0.616429, 0.606662, 0.597089, 0.587707, 0.573229, 0.564322, 0.555592, 0.547036, 0.538650, 0.530431, 0.522375, 0.514480, 0.506742, 0.499157, 0.487905, 0.480696, 0.473630, 0.466705, 0.459917, 0.453265, 0.446745, 0.440355, 0.434092, 0.427953, 0.419124, 0.413284, 0.407560, 0.401949, 0.396450, 0.391061, 0.385779, 0.380602, 0.375528, 0.370555, 0.363568, 0.358833, 0.354192, 0.349644, 0.345186, 0.340817, 0.336535, 0.332338, 0.328224, 0.324192, 0.318621, 0.314781, 0.311017, 0.307327, 0.303711, 0.300168, 0.296694, 0.293290, 0.289954, 0.286684, 0.282210, 0.279094, 0.276040, 0.273047, 0.270113, 0.267238, 0.264420, 0.261658, 0.258951, 0.256298, 0.252682, 0.250154, 0.247675, 0.245247, 0.242866, 0.240533, 0.238247, 0.236006, 0.233809, 0.231656, 0.228715, 0.226664, 0.224653, 0.222683, 0.220751, 0.218858, 0.217003, 0.215185, 0.213403, 0.211656, 0.209249, 0.207585, 0.205954, 0.204356, 0.202789, 0.201254, 0.199749, 0.198274, 0.196828, 0.195411, 0.193430, 0.192081, 0.190758, 0.189462, 0.188192, 0.186947, 0.185727, 0.184531, 0.183358, 0.182210, 0.180568, 0.179474, 0.178403, 0.177353, 0.176323, 0.175315, 0.174326, 0.173357, 0.172407, 0.171476, 0.170106, 0.169221, 0.168354, 0.167503, 0.166670, 0.165853, 0.165053, 0.164268, 0.163499, 0.162746, 0.161595, 0.160879, 0.160177, 0.159490, 0.158816, 0.158156, 0.157508, 0.156874, 0.156252, 0.155643, 0.154668, 0.154090, 0.153524, 0.152969, 0.152424, 0.151891, 0.151369, 0.150856, 0.150354, 0.149862, 0.149030, 0.148564, 0.148108, 0.147660, 0.147222, 0.146792, 0.146371, 0.145958, 0.145554, 0.145157, 0.144440, 0.144065, 0.143698, 0.143339, 0.142986, 0.142641, 0.142302, 0.141971, 0.141645, 0.141327, 0.140702, 0.140402, 0.140108, 0.139820, 0.139538, 0.139261, 0.138990, 0.138724, 0.138463, 0.138208, 0.137659, 0.137420, 0.137185, 0.136955, 0.136730, 0.136509, 0.136292, 0.136080, 0.135872, 0.135668, 0.135181, 0.134991, 0.134804, 0.134622, 0.134443, 0.134267, 0.134095, 0.133927, 0.133762, 0.133600, 0.133162, 0.133012, 0.132865, 0.132721, 0.132580, 0.132442, 0.132306, 0.132173, 0.132043, 0.131916, 0.131518, 0.131401, 0.131286, 0.131174, 0.131063, 0.130955, 0.130849, 0.130745, 0.130643, 0.130544, 0.130179, 0.130089, 0.130000, 0.129913, 0.129828, 0.129744, 0.129662, 0.129582, 0.129503, 0.129426, 0.129089, 0.129020, 0.128952, 0.128886, 0.128821, 0.128758, 0.128695, 0.128634, 0.128575, 0.128516, 0.128200, 0.128149, 0.128099, 0.128050, 0.128001, 0.127954, 0.127908, 0.127863, 0.127818, 0.127774, 0.127476, 0.127440, 0.127404, 0.127368, 0.127334, 0.127300, 0.127266, 0.127234, 0.127202, 0.127171, 0.126887, 0.126862, 0.126837, 0.126813, 0.126790, 0.126766, 0.126744, 0.126722, 0.126700, 0.126678, 0.126406, 0.126391, 0.126376, 0.126361, 0.126346, 0.126332, 0.126318, 0.126304, 0.126291, 0.126278, 0.126015, 0.126008, 0.126000, 0.125993, 0.125985, 0.125978, 0.125971, 0.125964, 0.125958, 0.125951, 0.125696, 0.125695, 0.125694, 0.125692, 0.125691, 0.125690, 0.125689, 0.125688, 0.125686, 0.125685, 0.125437, 0.125441, 0.125444, 0.125448, 0.125452, 0.125455, 0.125459, 0.125462, 0.125465, 0.125468, 0.125225, 0.125233, 0.125241, 0.125249, 0.125256, 0.125264, 0.125271, 0.125278, 0.125285, 0.125292, 0.125053, 0.125064, 0.125076, 0.125087, 0.125097, 0.125108, 0.125118, 0.125128, 0.125138, 0.125148, 0.124913, 0.124927, 0.124941, 0.124954, 0.124968, 0.124981, 0.124994, 0.125006, 0.125019, 0.125031 };

void init_filter()
{
    R(0, 0) = 62.5;
    ukf.C[0] = 1;
    ukf.C[1] = 10000;
    ukf.C[2] = 100;
    ukf.C[3] = 20;
    ukf.X[0] = 0.0;
    ukf.P(0, 0) = 40000.0;
    ukf.Cov_U(0, 0) = 250000.0;
    ukf.setMeasurementFunction(h,1);
}
// <DATA_END>


void test_ctor_dtor()
{
    ukf.setMeasurementFunction(h, 1);
    ukf.X[0] = EXTERNAL_TEMPERATURE; // initial temperature
    ukf.P.fill(0); // initial covariance
    ukf.Cov_U.fill(PROCESS_NOISE*PROCESS_NOISE);
    R.fill(MEASURE_NOISE*MEASURE_NOISE);
    ukf.C[0] = TIME_STEP;
    ukf.C[1] = THERMAL_INERTIA;
    ukf.C[2] = THERMAL_LOSSES;
    ukf.C[3] = EXTERNAL_TEMPERATURE;

    TEST_ASSERT_EQUAL(1, ukf.X.size());
    TEST_ASSERT_EQUAL(1, ukf.U.size());
    TEST_ASSERT_EQUAL(4, ukf.C.size());

    //check if everything is initialized correctly
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE, ukf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0, ukf.P(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, PROCESS_NOISE*PROCESS_NOISE, ukf.Cov_U[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, MEASURE_NOISE*MEASURE_NOISE, R(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, TIME_STEP, ukf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_INERTIA, ukf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_LOSSES, ukf.C[2]);
}

void test_predict()
{
    ukf.U[0] = 10; // heating power
    ukf.predict(); // first prediction is considered with step time 0, if you don't want that, you can set ukf.initted to true before calling predict
    TEST_ASSERT_FLOAT_WITHIN(1e-6, PROCESS_NOISE*PROCESS_NOISE, ukf.Cov_U[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, MEASURE_NOISE*MEASURE_NOISE, R(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, TIME_STEP, ukf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_INERTIA, ukf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_LOSSES, ukf.C[2]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE + 1, ukf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0.0025, ukf.P(0, 0));
}

void test_update()
{
    ukf.X[0] = EXTERNAL_TEMPERATURE; // reset temperature
    ukf.P.fill(1); // reset covariance
    R.fill(MEASURE_NOISE*MEASURE_NOISE);
    ukf.C[1] = THERMAL_INERTIA;
    ukf.C[2] = THERMAL_LOSSES;
    ukf.C[3] = EXTERNAL_TEMPERATURE;
    Z[0] = EXTERNAL_TEMPERATURE + 5; // measurement
    ukf.update(Z, R);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 20.19231, ukf.X[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, 0.9615384, ukf.P(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, PROCESS_NOISE*PROCESS_NOISE, ukf.Cov_U[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, MEASURE_NOISE*MEASURE_NOISE, R(0, 0));
    TEST_ASSERT_FLOAT_WITHIN(1e-6, TIME_STEP, ukf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_INERTIA, ukf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, THERMAL_LOSSES, ukf.C[2]);
    TEST_ASSERT_FLOAT_WITHIN(1e-6, EXTERNAL_TEMPERATURE, ukf.C[3]);
}

// #include <iostream>
void test_DATA()
{
    init_filter();
    ukf.setMeasurementFunction(h, 1);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 1.0, ukf.C[0]);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 10000.0, ukf.C[1]);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 100.0, ukf.C[2]);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, 20.0, ukf.C[3]);
    TEST_ASSERT_FLOAT_WITHIN(1e-5, P00[0], ukf.P(0, 0));

    for (int i = 1; i < sizeof(ZZ)/sizeof(ZZ[0]); i++)
    {
        ukf.U[0] = UU[i];
        ukf.predict();
        if (!isnan(ZZ[i]))
        {
            Z[0] = ZZ[i];
            ukf.update(Z, R);
        }
        TEST_ASSERT_TRUE(fabs((XX_hat[i] - ukf.X[0])/XX_hat[i]) < 1e-3);
        TEST_ASSERT_TRUE(fabs((sqrt(P00[i]) - sqrt(ukf.P(0, 0)))/sqrt(P00[i])) < 1e-3);
        // TEST_ASSERT_FLOAT_WITHIN(1e-2, XX_hat[i], ukf.X[0]);
        // TEST_ASSERT_FLOAT_WITHIN(1e-2, P00[i], ukf.P(0, 0));
    }
}

void setUp() {
    // Initialisation avant chaque test (laisser vide si inutile)
}

void tearDown() {
    // Nettoyage après chaque test (laisser vide si inutile)
}


void setup() {
    #ifndef NATIVE
    delay(2000); // Permet d'attendre que la liaison série soit établie
    #endif
    UNITY_BEGIN();
    RUN_TEST(test_ctor_dtor);
    RUN_TEST(test_predict);
    RUN_TEST(test_update);
    RUN_TEST(test_DATA);
    UNITY_END();
}

void loop() {
}

#ifdef NATIVE
int main(int argc, char **argv) {
    setup();
}
#endif
